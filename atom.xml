<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>6x5</title>
  <subtitle>JUST DO IT</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wo6x5a.github.io/"/>
  <updated>2017-04-11T09:25:51.353Z</updated>
  <id>https://wo6x5a.github.io/</id>
  
  <author>
    <name>6x5</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>有关Lucene的一些东西</title>
    <link href="https://wo6x5a.github.io/2017/04/11/%E6%9C%89%E5%85%B3Lucene%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B8%9C%E8%A5%BF/"/>
    <id>https://wo6x5a.github.io/2017/04/11/有关Lucene的一些东西/</id>
    <published>2017-04-11T06:56:50.000Z</published>
    <updated>2017-04-11T09:25:51.353Z</updated>
    
    <content type="html"><![CDATA[<p>因为项目中用到了Lucene,这里简单的说一下关于Lucene的一些东西.</p>
<h2 id="大概介绍"><a href="#大概介绍" class="headerlink" title="大概介绍"></a>大概介绍</h2><p>Lucene 是一个基于 Java 的全文信息检索工具包，它不是一个完整的搜索应用程序，而是为你的应用程序提供索引和搜索功能。Lucene 目前是 Apache Jakarta 家族中的一个开源项目。也是较为流行的基于 Java 开源全文检索工具包。<br>图 1 表示了搜索应用程序和 Lucene 之间的关系，也反映了利用 Lucene 构建搜索应用程序的流程：<br>图 1. 搜索应用程序和 Lucene 之间的关系<br><img src="/images/有关Lucene的一些东西001.jpg" alt="搜索应用程序和 Lucene 之间的关系"></p>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>举个例子,索引有点类似目录,就是什么内容,会告诉你在第几页，这样就能帮助读者比较快地找到相关内容的页码。<br>而数据库索引能够大大提高查询的速度原理也是一样，通过目录查找的速度要比一页一页地翻内容高多少倍……当然他还有另外一个原因是它是排好序的。对于检索系统来说核心是一个排序问题。<br>而数据库索引不是为全文索引设计的，因此，使用like数据库索引不是为全文索引设计的，因此，使用like “%keyword%”时，数据库索引是不起作用的，<br>在使用like查询时，搜索过程又变成类似于一页页翻书的遍历过程了，所以对于含有模糊查询的数据库服务来说，LIKE对性能的危害是极大的。<br>如果是需要对多个关键词进行模糊匹配：like”%keyword1%” and like “%keyword2%” …其效率也就可想而知了。</p>
<p>所以建立一个高效检索系统的关键是建立一个类似于科技索引一样的反向索引机制，将数据源（比如多篇文章）排序顺序存储的同时，有另外一个排好序的关键词列表，<br>用于存储关键词==&gt;文章映射关系，利用这样的映射关系索引：[关键词==&gt;出现关键词的文章编号，出现次数（甚至包括位置：起始偏移量，结束偏移量），出现频率]，<br>检索过程就是把模糊查询变成多个可以利用索引的精确查询的逻辑组合的过程。从而大大提高了多关键词查询的效率，所以，全文检索问题归结到最后是一个排序问题。</p>
<p>由此可以看出模糊查询相对数据库的精确查询是一个非常不确定的问题，这也是大部分数据库对全文检索支持有限的原因。<br>Lucene最核心的特征是通过特殊的索引结构实现了传统数据库不擅长的全文索引机制，并提供了扩展接口，以方便针对不同应用的定制。</p>
<h2 id="lucene的一些包"><a href="#lucene的一些包" class="headerlink" title="lucene的一些包"></a>lucene的一些包</h2><p>org.apache.lucene.document:  存储结构<br>这个包提供了一些为封装要索引的文档所需要的类，比如 Document, Field。这样，每一个文档最终被封装成了一个 Document 对象。<br>org.apache.lucene.analysis: 语言分析器<br>这个包主要功能是对文档进行分词，因为文档在建立索引之前必须要进行分词，所以这个包的作用可以看成是为建立索引做准备工作。<br>org.apache.lucene.index: 索引入口<br>这个包提供了一些类来协助创建索引以及对创建好的索引进行更新。这里面有两个基础的类：IndexWriter 和 IndexReader，其中 IndexWriter 是用来创建索引并添加文档到索引中的，IndexReader 是用来删除索引中的文档的。<br>org.apache.lucene.search: 搜索入口<br>这个包提供了对在建立好的索引上进行搜索所需要的类。比如 IndexSearcher 和 Hits, IndexSearcher 定义了在指定的索引上进行搜索的方法，Hits 用来保存搜索得到的结果。<br>org.apache.Lucene.queryParser:    查询分析器<br>org.apache.Lucene.store: 底层IO/存储结构<br>org.apache.Lucene.util: 一些公用的数据结构<br>…</p>
<h2 id="建立索引"><a href="#建立索引" class="headerlink" title="建立索引"></a>建立索引</h2><p>为了对文档进行索引，Lucene 提供了五个基础的类，他们分别是 Document, Field, IndexWriter, Analyzer, Directory。下面我们分别介绍一下这五个类的用途：<br>Document<br>Document 是用来描述文档的，这里的文档可以指一个 HTML 页面，一封电子邮件，或者是一个文本文件。一个 Document 对象由多个 Field 对象组成的。可以把一个 Document 对象想象成数据库中的一个记录，而每个 Field 对象就是记录的一个字段。<br>Field<br>Field 对象是用来描述一个文档的某个属性的，比如一封电子邮件的标题和内容可以用两个 Field 对象分别描述。<br>Analyzer<br>在一个文档被索引之前，首先需要对文档内容进行分词处理，这部分工作就是由 Analyzer 来做的。Analyzer 类是一个抽象类，它有多个实现。针对不同的语言和应用需要选择适合的 Analyzer。Analyzer 把分词后的内容交给 IndexWriter 来建立索引。<br>IndexWriter<br>IndexWriter 是 Lucene 用来创建索引的一个核心的类，他的作用是把一个个的 Document 对象加到索引中来。<br>Directory<br>这个类代表了 Lucene 的索引的存储的位置，这是一个抽象类，它目前有两个实现，第一个是 FSDirectory，它表示一个存储在文件系统中的索引的位置。第二个是 RAMDirectory，它表示一个存储在内存当中的索引的位置。<br>熟悉了建立索引所需要的这些类后，我们就开始对某个目录下面的文本文件建立索引了，清单 1 给出了对某个目录下的文本文件建立索引的源代码。</p>
<h2 id="搜索文档"><a href="#搜索文档" class="headerlink" title="搜索文档"></a>搜索文档</h2><p>利用 Lucene 进行搜索就像建立索引一样也是非常方便的。在上面一部分中，我们已经为一个目录下的文本文档建立好了索引，现在我们就要在这个索引上进行搜索以找到包含某个关键词或短语的文档。Lucene 提供了几个基础的类来完成这个过程，它们分别是呢 IndexSearcher, Term, Query, TermQuery, Hits. 下面我们分别介绍这几个类的功能。<br>Query<br>这是一个抽象类，他有多个实现，比如 TermQuery, BooleanQuery, PrefixQuery. 这个类的目的是把用户输入的查询字符串封装成 Lucene 能够识别的 Query。<br>Term<br>Term 是搜索的基本单位，一个 Term 对象有两个 String 类型的域组成。生成一个 Term 对象可以有如下一条语句来完成：Term term = new Term(“fieldName”,”queryWord”); 其中第一个参数代表了要在文档的哪一个 Field 上进行查找，第二个参数代表了要查询的关键词。<br>TermQuery<br>TermQuery 是抽象类 Query 的一个子类，它同时也是 Lucene 支持的最为基本的一个查询类。生成一个 TermQuery 对象由如下语句完成： TermQuery termQuery = new TermQuery(new Term(“fieldName”,”queryWord”)); 它的构造函数只接受一个参数，那就是一个 Term 对象。<br>IndexSearcher<br>IndexSearcher 是用来在建立好的索引上进行搜索的。它只能以只读的方式打开一个索引，所以可以有多个 IndexSearcher 的实例在一个索引上进行操作。<br>Hits<br>Hits 是用来保存搜索的结果的。</p>
<h2 id="项目使用总结"><a href="#项目使用总结" class="headerlink" title="项目使用总结"></a>项目使用总结</h2><p>现在的项目是这样使用Lucene的:<br>import jar-&gt;用job初始化待查询数据(建立索引)-&gt;查询返回(搜索文档),因为Lucene有很简单的api,这里就不细说了,结尾附上大致的代码例子:</p>
<h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><p>创建索引:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 处理百科信息</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">procAllForTermBaike</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	List&lt;Map&lt;String, String&gt;&gt; baikeList = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, String&gt;&gt;();</div><div class="line">	Query&lt;TermBaike&gt; query = <span class="keyword">this</span>.createQuery();</div><div class="line">	<span class="keyword">long</span> counts = <span class="keyword">this</span>.count(query);</div><div class="line">	Integer pages = <span class="keyword">this</span>.luceneService.getPages(Integer.valueOf(String.valueOf(counts)));</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pages; i++) &#123;</div><div class="line">		<span class="comment">// 查询获取数据</span></div><div class="line">		query.offset((i - <span class="number">1</span>) * <span class="number">100</span>).limit(<span class="number">100</span>);</div><div class="line">		QueryResults&lt;TermBaike&gt; result = <span class="keyword">this</span>.find(query);</div><div class="line">		List&lt;TermBaike&gt; TermBaikeList = result.asList();</div><div class="line">		<span class="comment">// 封装返回数据</span></div><div class="line">		<span class="keyword">for</span> (TermBaike termBaike : TermBaikeList) &#123;</div><div class="line">			Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">			map.put(<span class="string">"id"</span>, termBaike.get_id());</div><div class="line">			map.put(<span class="string">"name"</span>, termBaike.getVcName());</div><div class="line">			map.put(<span class="string">"nameEn"</span>, termBaike.getVcNameEn());</div><div class="line">			map.put(<span class="string">"label"</span>, String.valueOf(ServiceTypeEnum.BAIKE_LAB.getValue()));</div><div class="line">			baikeList.add(map);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">this</span>.luceneService.createIndex(ServiceTypeEnum.BAIKE.getKey(), baikeList, Boolean.TRUE);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>…job相关的代码就不放上来了,就是用job跑这个procxxx方法</p>
<p>调用的方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取页数</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getPages</span><span class="params">(Integer totalNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	Integer pages = <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span> ((totalNum % <span class="number">100</span>) == <span class="number">0</span>) &#123;</div><div class="line">		pages = totalNum / <span class="number">100</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		pages = (totalNum / <span class="number">100</span>) + <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> pages;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 创建索引</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">(Integer serviceType, List&lt;Map&lt;String, String&gt;&gt; list, Boolean isDel)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	IndexWriter indexWriter = <span class="keyword">this</span>.initIndexWriter(serviceType, isDel);</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="keyword">for</span> (Map&lt;String, String&gt; map : list) &#123;</div><div class="line">			Document doc = <span class="keyword">new</span> Document();</div><div class="line">			<span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</div><div class="line">				<span class="keyword">if</span> (<span class="keyword">null</span> != entry.getKey() &amp;&amp; <span class="keyword">null</span> != entry.getValue()) &#123;</div><div class="line">					doc.add(<span class="keyword">new</span> TextField(entry.getKey(), entry.getValue(), Field.Store.YES));</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			indexWriter.addDocument(doc);</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		logger.error(e);</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != indexWriter) &#123;</div><div class="line">			indexWriter.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>搜索文档:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 百科信息查询</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> key 关键字</div><div class="line"> * <span class="doctag">@param</span> currentPage 页码</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> Exception</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;TermBaikeVo&gt; <span class="title">queryBaike</span><span class="params">(String key, Integer currentPage)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	List&lt;TermBaikeVo&gt; termBaikeVoList = <span class="keyword">new</span> ArrayList&lt;TermBaikeVo&gt;();</div><div class="line">	Sort sort = <span class="keyword">new</span> Sort(<span class="keyword">new</span> SortField(<span class="string">"name"</span>, SortField.Type.STRING, <span class="keyword">true</span>));</div><div class="line">	List&lt;Document&gt; docList = <span class="keyword">this</span>.luceneService.query(ServiceTypeEnum.BAIKE.getKey(), key, <span class="string">"name"</span>, sort, currentPage, DEF_ENUM.DEF_TWENTY.getnCode());</div><div class="line">	<span class="keyword">for</span> (Document doc : docList) &#123;</div><div class="line">		TermBaikeVo termBaikeVo = <span class="keyword">new</span> TermBaikeVo();</div><div class="line">		termBaikeVo.setBaikeId(doc.get(<span class="string">"id"</span>));</div><div class="line">		termBaikeVo.setVcName(doc.get(<span class="string">"name"</span>));</div><div class="line">		termBaikeVo.setVcName(doc.get(<span class="string">"nameEn"</span>));</div><div class="line">		termBaikeVo.setVcLabel(doc.get(<span class="string">"label"</span>));</div><div class="line">		termBaikeVoList.add(termBaikeVo);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> termBaikeVoList;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调用的方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 单条件分页查询</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Document&gt; <span class="title">query</span><span class="params">(Integer serviceType, String key, String field, Sort sort, Integer currentPage, Integer pageSize)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	List&lt;Document&gt; docList = <span class="keyword">new</span> ArrayList&lt;Document&gt;();</div><div class="line">	IndexReader reader = <span class="keyword">this</span>.initIndexReader(serviceType);</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</div><div class="line">		IndexSearcher indexSearcher = <span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">		QueryParser parser = <span class="keyword">new</span> QueryParser(field, analyzer);</div><div class="line">		org.apache.lucene.search.Query query = parser.createPhraseQuery(field, key);</div><div class="line">		TopDocs topDocs = indexSearcher.search(query, currentPage + pageSize, sort);</div><div class="line">		ScoreDoc[] scoreDocs = topDocs.scoreDocs;</div><div class="line">		<span class="keyword">if</span> (scoreDocs.length == <span class="number">0</span>) &#123;</div><div class="line">			scoreDocs = <span class="keyword">this</span>.wildcardQuery(key, field, indexSearcher);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> begin = pageSize * (currentPage - <span class="number">1</span>);</div><div class="line">		<span class="keyword">int</span> end = Math.min(begin + pageSize, scoreDocs.length);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = begin; i &lt; end; i++) &#123;</div><div class="line">			<span class="keyword">int</span> docID = scoreDocs[i].doc;</div><div class="line">			Document doc = indexSearcher.doc(docID);</div><div class="line">			docList.add(doc);</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		logger.error(e);</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != reader) &#123;</div><div class="line">			reader.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> docList;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为项目中用到了Lucene,这里简单的说一下关于Lucene的一些东西.&lt;/p&gt;
&lt;h2 id=&quot;大概介绍&quot;&gt;&lt;a href=&quot;#大概介绍&quot; class=&quot;headerlink&quot; title=&quot;大概介绍&quot;&gt;&lt;/a&gt;大概介绍&lt;/h2&gt;&lt;p&gt;Lucene 是一个基于 Java
    
    </summary>
    
      <category term="工作" scheme="https://wo6x5a.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="Lucene" scheme="https://wo6x5a.github.io/tags/Lucene/"/>
    
  </entry>
  
  <entry>
    <title>编码散记</title>
    <link href="https://wo6x5a.github.io/2017/04/01/%E7%BC%96%E7%A0%81%E6%95%A3%E8%AE%B0/"/>
    <id>https://wo6x5a.github.io/2017/04/01/编码散记/</id>
    <published>2017-04-01T08:14:23.000Z</published>
    <updated>2017-04-11T03:08:39.902Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发习惯"><a href="#开发习惯" class="headerlink" title="开发习惯"></a>开发习惯</h2><ul>
<li>guava,程序员的好朋友.</li>
<li>controller层, 不要放有关业务的代码.业务代码放service层.</li>
<li>如果if(){}else if(){}…..&gt;=3 个if, 个人觉得,用switch case 比较好.</li>
<li>有些功能尽量使用java官方工具类.不要自己写,比如StringUtils,CollectionUtils,Arrays等.</li>
<li>合理规范注释, 前人编码注释清晰了, 后人改动思路就明了了.还有就是命名的规范(代码改动,更新注释).</li>
<li>尽量不要写重复代码,多次使用的代码抽出来独立成为一个方法调用,private或public根据具体业务情况而定.</li>
<li>生产代码禁止以System及Throwable.printStackTrace的方式输出日志信息, 必须用Logger替代, 注意log等级.</li>
<li>controller层是前台和后台交互的.接口单一职责.一个接口一个功能(如果是在controller层进行权限控制的话,能更好的进行权限控制), 尽量清晰.不过service层可以提高代码复用率.</li>
</ul>
<h2 id="一些技巧"><a href="#一些技巧" class="headerlink" title="一些技巧"></a>一些技巧</h2><ul>
<li>运用set的key不能重复, 可以去重.</li>
</ul>
<h2 id="有坑的点"><a href="#有坑的点" class="headerlink" title="有坑的点"></a>有坑的点</h2><ul>
<li>开发中还是特别要注意new object的这个问题.</li>
<li>要注意map是无序的,千万不要数据库排序查询出来结果之后,放map.</li>
<li>BigDecimal.add,subtract,multiply,divide,返回的是一个new object,要注意.</li>
<li>get/set,方法中最好别写逻辑,报错console不会提示,只能自己一步步debug进去看异常.</li>
</ul>
<h2 id="性能相关"><a href="#性能相关" class="headerlink" title="性能相关"></a>性能相关</h2><ul>
<li>利用好缓存, 缓存最常用最适合的地方:数据字典.</li>
<li>for循环内避免查询处理相同的数据, 多次使用的数据放for循环外面.</li>
</ul>
<h2 id="关于工具"><a href="#关于工具" class="headerlink" title="关于工具"></a>关于工具</h2><ul>
<li>chrome开发者工具: 点击代码窗口左下角的那个’{ }’(pretty print) 标签, 能格式化被minify掉的css/js.</li>
<li>chrome开发者工具: 可以设置网络的访问速度来模拟一个网络很慢的情况.(network-&gt;no throtting-&gt;随意设置).</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开发习惯&quot;&gt;&lt;a href=&quot;#开发习惯&quot; class=&quot;headerlink&quot; title=&quot;开发习惯&quot;&gt;&lt;/a&gt;开发习惯&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;guava,程序员的好朋友.&lt;/li&gt;
&lt;li&gt;controller层, 不要放有关业务的代码.业务代码放ser
    
    </summary>
    
      <category term="工作" scheme="https://wo6x5a.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="其他" scheme="https://wo6x5a.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>念奴娇 桂花</title>
    <link href="https://wo6x5a.github.io/2017/04/01/%E5%BF%B5%E5%A5%B4%E5%A8%87-%E6%A1%82%E8%8A%B1/"/>
    <id>https://wo6x5a.github.io/2017/04/01/念奴娇-桂花/</id>
    <published>2017-04-01T07:25:10.000Z</published>
    <updated>2017-04-01T08:15:56.296Z</updated>
    
    <content type="html"><![CDATA[<p>芳影绰约，寒玉阶，蟾宫折桂婵娟。辗转花前，愁几句，落华曾为谁妍？知愁草木，韶白深切，哭对情海如烟。<br>枉占三秋，十里西风瘦却。</p>
<p>小镇塘前客栈，纵几缕相思，几多诗篇。风捡残花，相思染，几度诗冷窗前。鬓白几许？乃红尘点缀，桂香自怜。<br>凌云分付，风花雪月云烟。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;芳影绰约，寒玉阶，蟾宫折桂婵娟。辗转花前，愁几句，落华曾为谁妍？知愁草木，韶白深切，哭对情海如烟。&lt;br&gt;枉占三秋，十里西风瘦却。&lt;/p&gt;
&lt;p&gt;小镇塘前客栈，纵几缕相思，几多诗篇。风捡残花，相思染，几度诗冷窗前。鬓白几许？乃红尘点缀，桂香自怜。&lt;br&gt;凌云分付，风花雪月云
    
    </summary>
    
      <category term="文艺" scheme="https://wo6x5a.github.io/categories/%E6%96%87%E8%89%BA/"/>
    
    
      <category term="古诗词" scheme="https://wo6x5a.github.io/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>夜行者的伤</title>
    <link href="https://wo6x5a.github.io/2017/04/01/%E5%A4%9C%E8%A1%8C%E8%80%85%E7%9A%84%E4%BC%A4/"/>
    <id>https://wo6x5a.github.io/2017/04/01/夜行者的伤/</id>
    <published>2017-04-01T07:18:45.000Z</published>
    <updated>2017-04-01T07:52:55.779Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>你充满阳光<br>我怕见到你<br><br>有太阳就会有影子<br>而我是个夜行者<br><br>我不怕黑夜<br>一个人<br>连影子都别跟着我<br><br>我不怕孤独<br>一个人<br>去浪迹天涯<br><br>我不怕无助<br>一个人<br>躲在被窝里哭<br>我也不会求助<br><br>我不怕<br>我无牵无挂<br></blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;你充满阳光&lt;br&gt;我怕见到你&lt;br&gt;&lt;br&gt;有太阳就会有影子&lt;br&gt;而我是个夜行者&lt;br&gt;&lt;br&gt;我不怕黑夜&lt;br&gt;一个人&lt;br&gt;连影子都别跟着我&lt;br&gt;&lt;br&gt;我不怕孤独&lt;br&gt;一个人&lt;br&gt;去
    
    </summary>
    
      <category term="文艺" scheme="https://wo6x5a.github.io/categories/%E6%96%87%E8%89%BA/"/>
    
    
      <category term="现代诗" scheme="https://wo6x5a.github.io/tags/%E7%8E%B0%E4%BB%A3%E8%AF%97/"/>
    
  </entry>
  
  <entry>
    <title>原本两个人</title>
    <link href="https://wo6x5a.github.io/2017/04/01/%E5%8E%9F%E6%9C%AC%E4%B8%A4%E4%B8%AA%E4%BA%BA/"/>
    <id>https://wo6x5a.github.io/2017/04/01/原本两个人/</id>
    <published>2017-04-01T07:01:49.000Z</published>
    <updated>2017-04-01T07:52:54.802Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><br>以前<br>一个人是享受<br>躺在床上<br>看着天花板<br>数着星星<br>可它并不透明<br>我却看到整个星空<br>一个人的世界<br>一个人的梦<br><br>后来<br>一个人是罪无可恕<br>躺在草地上<br>望着夜空<br>却再也见不到星星<br>但这可是天空<br>我也不是很懂<br>一个人的牢笼<br>一个人的痛<br></blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;br&gt;以前&lt;br&gt;一个人是享受&lt;br&gt;躺在床上&lt;br&gt;看着天花板&lt;br&gt;数着星星&lt;br&gt;可它并不透明&lt;br&gt;我却看到整个星空&lt;br&gt;一个人的世界&lt;br&gt;一个人的梦&lt;br&gt;&lt;br&gt;后来&lt;br&gt;一个人是罪无
    
    </summary>
    
      <category term="文艺" scheme="https://wo6x5a.github.io/categories/%E6%96%87%E8%89%BA/"/>
    
    
      <category term="现代诗" scheme="https://wo6x5a.github.io/tags/%E7%8E%B0%E4%BB%A3%E8%AF%97/"/>
    
  </entry>
  
  <entry>
    <title>linux下项目环境搭建部署</title>
    <link href="https://wo6x5a.github.io/2017/03/29/linux%E4%B8%8B%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/"/>
    <id>https://wo6x5a.github.io/2017/03/29/linux下项目环境搭建部署/</id>
    <published>2017-03-29T06:54:40.000Z</published>
    <updated>2017-03-30T02:37:40.373Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>centos7安装<br>  不做展示,自行解决</li>
<li><p>数据库安装:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install mariadb mariadb-server</div></pre></td></tr></table></figure>
<ol>
<li><p>启动mariadb服务程序并添加到开机启动项中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@linuxprobe ~]# systemctl start mariadb</div><div class="line">[root@linuxprobe ~]# systemctl enable mariadb</div></pre></td></tr></table></figure>
</li>
<li><p>为了保证数据库的安全性，一定要进行初始化工作：</p>
<p>第1步：设定root用户密码。<br>第2步：删除匿名帐号。<br>第3步：禁止root用户从远程登陆。<br>第4步：删除test数据库并取消对其的访问权限。<br>第5步：刷新授权表，让初始化后的设定立即生效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@linuxprobe ~]# mysql_secure_installation</div><div class="line">Enter current password for root (enter for none): 当前数据库密码为空，直接敲击回车。</div><div class="line">Set root password? [Y/n] y</div><div class="line">New password: 输入要为root用户设置的数据库密码。</div><div class="line">Re-enter new password: 重复再输入一次密码。</div><div class="line">Password updated successfully!</div><div class="line">Remove anonymous users? [Y/n] y（删除匿名帐号）</div><div class="line"> ... Success!</div><div class="line">Disallow root login remotely? [Y/n] y(禁止root用户从远程登陆)</div><div class="line"> ... Success!</div><div class="line">Remove test database and access to it? [Y/n] y(删除test数据库并取消对其的访问权限)</div><div class="line"> - Dropping test database...</div><div class="line"> ... Success!</div><div class="line"> - Removing privileges on test database...</div><div class="line"> ... Success!</div><div class="line">Reload privilege tables now? [Y/n] y(刷新授权表，让初始化后的设定立即生效)</div><div class="line"> ... Success!</div></pre></td></tr></table></figure>
</li>
<li><p>设置防火墙对数据库服务的允许策略：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@linuxprobe ~]# firewall-cmd --permanent --add-service=mysql</div><div class="line">success</div><div class="line">[root@linuxprobe ~]# firewall-cmd --reload</div><div class="line">success</div></pre></td></tr></table></figure>
</li>
<li><p>使用root用户登陆到数据库中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@linuxprobe ~]# mysql -u root -p</div><div class="line">Enter password: 此处输入root用户在数据库中的密码。</div><div class="line">Welcome to the MariaDB monitor. Commands end with ; or \g.</div></pre></td></tr></table></figure>
</li>
<li><p>创建一个新的数据库用户：</p>
<p>创建数据库用户的命令:CREATE USER 用户名@主机名 IDENTIFIED BY ‘密码’;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MariaDB [(none)]&gt; create user &apos;herakles&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos;;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div></pre></td></tr></table></figure>
<p>‘%’允许远程登陆此用户</p>
</li>
<li>给予herakles用户对user表单的查询、更新、删除、插入权限：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MariaDB [mysql]&gt; GRANT SELECT,UPDATE,DELETE,INSERT on mysql.user to luke@localhost;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<ul>
<li><p>redis</p>
<p>  安装必要包</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install gcc</div></pre></td></tr></table></figure>
<p>  安装redis</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#下载</div><div class="line">wget http://download.redis.io/releases/redis-3.0.0.tar.gz</div><div class="line">tar zxvf redis-3.0.0.tar.gz</div><div class="line">cd redis-3.0.0</div><div class="line">#如果不加参数,linux下会报错</div><div class="line">make MALLOC=libc</div></pre></td></tr></table></figure>
<p>  启动</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#启动redis</div><div class="line">src/redis-server &amp;</div><div class="line">#关闭redis</div><div class="line">src/redis-cli shutdown</div></pre></td></tr></table></figure>
<p>  测试</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ src/redis-cli</div><div class="line">127.0.0.1:6379&gt; set foo bar</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; get foo</div><div class="line">&quot;bar&quot;</div><div class="line">$</div></pre></td></tr></table></figure>
</li>
<li><p>MongoDB</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y mongodb-org</div></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mongodb服务使用</div><div class="line"></div><div class="line">#启动</div><div class="line">service mongod start</div><div class="line">#停止</div><div class="line">service mongod stop</div><div class="line">#重启</div><div class="line">service mongod restart</div><div class="line">#增加开机启动</div><div class="line">chkconfig mongod on</div></pre></td></tr></table></figure>
</li>
</ul>
<p>未完待续…</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;centos7安装&lt;br&gt;  不做展示,自行解决&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据库安装:&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;li
    
    </summary>
    
      <category term="备忘" scheme="https://wo6x5a.github.io/categories/%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="linux" scheme="https://wo6x5a.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>常用工具</title>
    <link href="https://wo6x5a.github.io/2017/03/28/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <id>https://wo6x5a.github.io/2017/03/28/常用工具/</id>
    <published>2017-03-28T05:47:17.000Z</published>
    <updated>2017-03-30T02:38:41.966Z</updated>
    
    <content type="html"><![CDATA[<p><strong>远程连接服务器</strong>: winscp/putty/Xshell</p>
<p><strong>ftp</strong>: Xftp</p>
<p><strong>mongodbGUI</strong>: Robomongo</p>
<p><strong>编辑器</strong>: notepad++, vim</p>
<p><strong>接口调试</strong>: postman</p>
<p><strong>监控分析</strong>: BTrace</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;远程连接服务器&lt;/strong&gt;: winscp/putty/Xshell&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ftp&lt;/strong&gt;: Xftp&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mongodbGUI&lt;/strong&gt;: Robomongo&lt;/p&gt;
&lt;p&gt;&lt;str
    
    </summary>
    
      <category term="备忘" scheme="https://wo6x5a.github.io/categories/%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="其他" scheme="https://wo6x5a.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Linux日常记录</title>
    <link href="https://wo6x5a.github.io/2017/03/27/Linux%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    <id>https://wo6x5a.github.io/2017/03/27/Linux日常记录/</id>
    <published>2017-03-27T09:37:05.000Z</published>
    <updated>2017-03-30T02:37:34.501Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>linux开机启动服务目录:/etc/init.d</p>
</li>
<li><p>启动redis客户端:/usr/local/redis-3.2.4/src/redis-cli </p>
</li>
<li><p>Linux下剪切拷贝命令</p>
</li>
</ul>
<p>命令格式: mv   source    dest</p>
<p>mv: 命令字 source: 源文件 dest: 目的地址</p>
<ul>
<li>Linux下拷贝命令</li>
</ul>
<p>命令格式：cp  [-rf]  source  dest</p>
<p>使用备注：源文件在前，目标文件在后。</p>
<p>参数说明：</p>
<p>-r  若 source 中含有目录，则将目录下之档案亦皆依序拷贝至目的地。<br>-f  若目的地已经有相同档名的档案存在，则在复制前先予以删除再行复制。</p>
<ul>
<li>删除命令</li>
</ul>
<p>1、删除home目录下的test目录</p>
<p> rm /home/test</p>
<p>2、这种不带参数的删除方法经常会提示无法删除，因为权限不够。</p>
<p> rm -r /home/test</p>
<p>3、-r是递归的删除参数表中的目录及其子目录。 目录将被清空并且删除。 当删除目录包含的具有写保护的文件时用户通常是被提示的。</p>
<p>rm -rf /home/test</p>
<p>-4、f是不提示用户，删除目录下的所有文件。请注意检查路径，输成别的目录就悲剧了。</p>
<p> rm -ir /home/test</p>
<p>5、-i是交互模式。使用这个选项，rm命令在删除任何文件前提示用户确认。</p>
<ul>
<li>Yum软件仓库</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>yum r…epolist all</td>
<td>列出所有仓库。</td>
</tr>
<tr>
<td>yum list all</td>
<td>列出仓库中所有软件包</td>
</tr>
<tr>
<td>yum info 软件包名称</td>
<td>查看软件包信息</td>
</tr>
<tr>
<td>yum install 软件包名称</td>
<td>安装软件包</td>
</tr>
<tr>
<td>yum reinstall 软件包名称</td>
<td>重新安装软件包</td>
</tr>
<tr>
<td>yum update 软件包名称</td>
<td>升级软件包</td>
</tr>
<tr>
<td>yum remove 软件包</td>
<td>移除软件包</td>
</tr>
<tr>
<td>yum clean all</td>
<td>清除所有仓库缓存</td>
</tr>
<tr>
<td>yum check-update</td>
<td>检查可更新的软件包</td>
</tr>
<tr>
<td>yum grouplist</td>
<td>查看系统中已经安装的软件包组</td>
</tr>
<tr>
<td>yum groupinstall 软件包组</td>
<td>安装指定的软件包组</td>
</tr>
<tr>
<td>yum groupremove软件包组</td>
<td>移除指定的软件包组</td>
</tr>
<tr>
<td>yum groupinfo 软件包组</td>
<td>查询指定的软件包组信息</td>
</tr>
</tbody>
</table>
<ul>
<li>systemctl管理服务的启动、重启、停止、重载、查看状态的命令：</li>
</ul>
<table>
<thead>
<tr>
<th>Sysvinit命令(红帽RHEL6系统)</th>
<th>Systemctl命令（红帽RHEL7系统）</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>service foo start</td>
<td>systemctl start foo.service</td>
<td>启动服务</td>
</tr>
<tr>
<td>service foo restart</td>
<td>systemctl restart foo.service</td>
<td>重启服务</td>
</tr>
<tr>
<td>service foo stop</td>
<td>systemctl stop foo.service</td>
<td>停止服务</td>
</tr>
<tr>
<td>service foo reload</td>
<td>systemctl reload foo.service</td>
<td>重新加载配置文件（不终止服务）</td>
</tr>
<tr>
<td>service foo status</td>
<td>systemctl status foo.service</td>
<td>查看服务状态</td>
</tr>
</tbody>
</table>
<ul>
<li>systemctl设置服务的开机启动、不启动、查看各级别下服务启动状态的命令：</li>
</ul>
<table>
<thead>
<tr>
<th>Sysvinit命令(红帽RHEL6系统)</th>
<th>Systemctl命令（红帽RHEL7系统）</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>chkconfig foo on</td>
<td>systemctl enable foo.service</td>
<td>开机自动启动</td>
</tr>
<tr>
<td>chkconfig foo off</td>
<td>systemctl disable foo.service</td>
<td>开机不自动启动</td>
</tr>
<tr>
<td>chkconfig foo</td>
<td>systemctl is-enabled foo.service</td>
<td>查看特定服务是否为开机自启动</td>
</tr>
<tr>
<td>chkconfig –list</td>
<td>systemctl list-unit-files –type=service</td>
<td>查看各个级别下服务的启动与禁用情况</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;linux开机启动服务目录:/etc/init.d&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动redis客户端:/usr/local/redis-3.2.4/src/redis-cli &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linux下剪切拷贝命令&lt;/p&gt;
&lt;/
    
    </summary>
    
      <category term="备忘" scheme="https://wo6x5a.github.io/categories/%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="linux" scheme="https://wo6x5a.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>mongodb操作日志</title>
    <link href="https://wo6x5a.github.io/2017/03/27/mongodb%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97/"/>
    <id>https://wo6x5a.github.io/2017/03/27/mongodb操作日志/</id>
    <published>2017-03-27T09:31:47.000Z</published>
    <updated>2017-03-30T02:37:50.094Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 根据查询结果,替换某个字段的字符串</span></div><div class="line"></div><div class="line"><span class="comment">// 模糊查询vcPicUrl中有'http:'字段的结果</span></div><div class="line"><span class="keyword">var</span> list = db.getCollection(<span class="string">'tbArticle'</span>).find(&#123;<span class="string">"vcPicUrl"</span>:<span class="regexp">/http:/</span>&#125;);</div><div class="line"><span class="comment">// var index = 0;</span></div><div class="line"><span class="comment">// list.toArray();</span></div><div class="line"><span class="comment">// while(list.hasNext())&#123;</span></div><div class="line"><span class="comment">//         var url = list[index].vcPicUrl;</span></div><div class="line"><span class="comment">//         print(url);</span></div><div class="line"><span class="comment">//         var rurl = url.replace('http:','https:');</span></div><div class="line"><span class="comment">//         print(rurl);</span></div><div class="line"><span class="comment">//         db.getCollection('tbArticle').update(&#123;"_id":list[index]._id&#125;, &#123;$set:&#123;'vcPicUrl':rurl&#125;&#125;);</span></div><div class="line"><span class="comment">//         index=index+1;</span></div><div class="line"><span class="comment">//     &#125;</span></div><div class="line">print(list.length());</div><div class="line"><span class="comment">// 将vcPicUrl中的http: 替换成 https:</span></div><div class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length(); i++) &#123;</div><div class="line">        <span class="keyword">var</span> article = list[i];</div><div class="line">        <span class="keyword">var</span> url = article.vcPicUrl;</div><div class="line">        <span class="keyword">var</span> rurl = url.replace(<span class="string">'http:'</span>,<span class="string">'https:'</span>);</div><div class="line">        db.getCollection(<span class="string">'tbArticle'</span>).update(&#123;<span class="string">"_id"</span>:article._id&#125;, &#123;<span class="attr">$set</span>:&#123;<span class="string">'vcPicUrl'</span>:rurl&#125;&#125;);</div><div class="line">     &#125;</div><div class="line">     print(<span class="string">"success"</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
      <category term="工作" scheme="https://wo6x5a.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="mongodb" scheme="https://wo6x5a.github.io/tags/mongodb/"/>
    
      <category term="nosql" scheme="https://wo6x5a.github.io/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>spring data jpa 查询使用案例</title>
    <link href="https://wo6x5a.github.io/2017/03/27/spring-data-jpa-%E6%9F%A5%E8%AF%A2%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/"/>
    <id>https://wo6x5a.github.io/2017/03/27/spring-data-jpa-查询使用案例/</id>
    <published>2017-03-27T09:29:11.000Z</published>
    <updated>2017-03-30T02:37:53.485Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSumAmount</span><span class="params">(<span class="keyword">final</span> AcctDtlSearchDto searchDto, <span class="keyword">final</span> ERecvPayFlag recvPayFlag)</span> </span>&#123;  </div><div class="line">	String startDate = searchDto.getStartDate();                                                </div><div class="line">	String endDate = searchDto.getEndDate();                                                    </div><div class="line">	EUseType useType = searchDto.getUseType();                                                  </div><div class="line">	CriteriaBuilder builder = em.getCriteriaBuilder();                                          </div><div class="line">	CriteriaQuery&lt;BigDecimal&gt; query = builder.createQuery(BigDecimal.class);                    </div><div class="line">	Root&lt;SubAcctTrxJnlPo&gt; root = query.from(SubAcctTrxJnlPo.class);                             </div><div class="line">	Predicate predicate = builder.conjunction();                                                </div><div class="line">	List&lt;Expression&lt;Boolean&gt;&gt; expressions = predicate.getExpressions();                         </div><div class="line">	Expression&lt;BigDecimal&gt; sumTrxAmt = builder.sum(root.&lt;BigDecimal&gt; get(<span class="string">"trxAmt"</span>));            </div><div class="line">	<span class="keyword">if</span> (StringUtils.isNotBlank(startDate)) &#123;                                                    </div><div class="line">		expressions.add(builder.greaterThanOrEqualTo(root.&lt;String&gt; get(<span class="string">"trxDate"</span>), startDate)); </div><div class="line">	&#125;                                                                                           </div><div class="line">	<span class="keyword">if</span> (StringUtils.isNotBlank(endDate)) &#123;                                                      </div><div class="line">		expressions.add(builder.lessThanOrEqualTo(root.&lt;String&gt; get(<span class="string">"trxDate"</span>), endDate));      </div><div class="line">	&#125;                                                                                           </div><div class="line">	<span class="keyword">if</span> (EUseType.ALL != useType) &#123;                                                              </div><div class="line">		expressions.add(builder.equal(root.&lt;EUseType&gt; get(<span class="string">"useType"</span>), useType));                </div><div class="line">	&#125;                                                                                           </div><div class="line">	<span class="keyword">if</span> (<span class="keyword">null</span> != recvPayFlag) &#123;                                                                  </div><div class="line">		expressions.add(builder.equal(root.&lt;ERecvPayFlag&gt; get(<span class="string">"recvPayFlag"</span>), recvPayFlag));    </div><div class="line">	&#125;                                                                                           </div><div class="line">	query.where(predicate);                                                                     </div><div class="line">	query.select(sumTrxAmt);                                                                    </div><div class="line">	BigDecimal result = em.createQuery(query).getSingleResult();                                </div><div class="line">	result = (<span class="keyword">null</span> == result ? BigDecimal.ZERO : result);                                       </div><div class="line">	<span class="keyword">return</span> result.toString();                                                                   </div><div class="line">&#125;                   </div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> BigDecimal <span class="title">getWarrantedProjectAmt</span><span class="params">(<span class="keyword">final</span> String userId)</span> </span>&#123;</div><div class="line">	List&lt;ProjectPo&gt; list = projectRepository.findAll(<span class="keyword">new</span> Specification&lt;ProjectPo&gt;() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;ProjectPo&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</div><div class="line">		Predicate predicate = cb.conjunction();</div><div class="line">		List&lt;Expression&lt;Boolean&gt;&gt; expressions = predicate.getExpressions();</div><div class="line">		expressions.add(cb.equal(root.&lt;String&gt; get(<span class="string">"wrtrId"</span>), userId));</div><div class="line">		List&lt;EProjStatus&gt; inStatus = Arrays.asList(EProjStatus.RISK_AUDIT, EProjStatus.RISK_RATING);</div><div class="line">		expressions.add(root.&lt;EProjStatus&gt; get(<span class="string">"status"</span>).in(inStatus));</div><div class="line">		<span class="keyword">return</span> predicate;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">	BigDecimal warrantAmt = BigDecimal.ZERO;</div><div class="line">	<span class="keyword">for</span> (ProjectPo proj : list) &#123;</div><div class="line">		warrantAmt = warrantAmt.add(proj.getProjectAmt());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> warrantAmt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;ProdServItemDto&gt; <span class="title">getItems</span><span class="params">(<span class="keyword">final</span> ProdServItemSearchDto searchDto, <span class="keyword">final</span> String currUserId)</span></span>&#123;</div><div class="line">	<span class="keyword">long</span> times = System.currentTimeMillis();</div><div class="line">	List&lt;ProdServInfoPo&gt; list = prodServInfoRepo.findAll(<span class="keyword">new</span> Specification&lt;ProdServInfoPo&gt;()&#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;ProdServInfoPo&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</div><div class="line">			Predicate predicate = cb.conjunction();</div><div class="line">			String workDate = CommonBusinessUtil.getCurrentWorkDate();</div><div class="line">                List&lt;Expression&lt;Boolean&gt;&gt; expressions = predicate.getExpressions();</div><div class="line">                <span class="comment">// 已授信过滤</span></div><div class="line">                expressions.add(cb.exists(getProdServParamSubQuery(query, cb, workDate, root.&lt;String&gt;get(<span class="string">"userId"</span>))));</div><div class="line">                <span class="keyword">if</span>(StringUtils.isNotBlank(searchDto.getName()))&#123;</div><div class="line">                	expressions.add(cb.like(root.&lt;EnterpriseInfoPo&gt;get(<span class="string">"enterpriseInfoPo"</span>).&lt;String&gt;get(<span class="string">"name"</span>), <span class="string">"%"</span>+searchDto.getName()+<span class="string">"%"</span>));</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(StringUtils.isNotBlank(searchDto.getTelephone()))&#123;</div><div class="line">                	expressions.add(cb.like(root.&lt;EnterpriseInfoPo&gt;get(<span class="string">"enterpriseInfoPo"</span>).&lt;String&gt;get(<span class="string">"telephone"</span>), <span class="string">"%"</span>+searchDto.getTelephone()+<span class="string">"%"</span>));</div><div class="line">                &#125;</div><div class="line">                Expression&lt;Boolean&gt; servProvTypes = root.&lt;EWarrantProdServProvType&gt; get(<span class="string">"servProvType"</span>).in(EWarrantProdServProvType.MICRO_CMPY, EWarrantProdServProvType.WRTR_CMPY);</div><div class="line">                Expression&lt;Boolean&gt; unionServProvType = cb.and(</div><div class="line">                		cb.equal(root.&lt;EWarrantProdServProvType&gt; get(<span class="string">"servProvType"</span>), EWarrantProdServProvType.UNION_CMPY), </div><div class="line">                		cb.exists(getSubQuery(query, cb, currUserId, root.&lt;String&gt; get(<span class="string">"userId"</span>))));</div><div class="line">                expressions.add(cb.or(servProvTypes, unionServProvType));</div><div class="line">                <span class="comment">/** 如果是小贷,不显示自己 **/</span></div><div class="line">                expressions.add(cb.notEqual(root.&lt;String&gt;get(<span class="string">"userId"</span>), currUserId));</div><div class="line">                <span class="keyword">return</span> predicate;</div><div class="line">			&#125;</div><div class="line">			<span class="function"><span class="keyword">private</span> Subquery&lt;String&gt; <span class="title">getSubQuery</span><span class="params">(CriteriaQuery&lt;?&gt; query, </span></span></div><div class="line">					CriteriaBuilder cb, String fncrId, Path&lt;String&gt; prodServUserId) &#123;</div><div class="line">                Subquery&lt;String&gt; subQuery = query.subquery(String.class);</div><div class="line">                Root&lt;ProdServInfoPo&gt; prodServ = subQuery.from(ProdServInfoPo.class);</div><div class="line">                Join&lt;ProdServInfoPo, ProdServGroupPo&gt; prodServGroup = prodServ.join(<span class="string">"prodServGroupList"</span>, JoinType.INNER);</div><div class="line">                Join&lt;ProdServGroupPo, GroupPo&gt; group = prodServGroup.join(<span class="string">"groupPo"</span>, JoinType.INNER);</div><div class="line">                Join&lt;GroupPo, GroupUserPo&gt; groupUser = group.join(<span class="string">"groupUserPoSet"</span>, JoinType.INNER);</div><div class="line">                Join&lt;GroupUserPo, FncrInfoPo&gt; fncrInfo = groupUser.join(<span class="string">"fncrInfoPo"</span>, JoinType.INNER);</div><div class="line">                <span class="keyword">return</span> subQuery.select(prodServ.&lt;String&gt;get(<span class="string">"userId"</span>)).where(</div><div class="line">                		cb.and(cb.equal(prodServ.get(<span class="string">"userId"</span>), prodServUserId), </div><div class="line">                				cb.equal(fncrInfo.&lt;String&gt; get(<span class="string">"userId"</span>), fncrId)));</div><div class="line">            &#125;</div><div class="line">			</div><div class="line">			<span class="function"><span class="keyword">private</span> Subquery&lt;String&gt; <span class="title">getProdServParamSubQuery</span><span class="params">(CriteriaQuery&lt;?&gt; query, </span></span></div><div class="line">					CriteriaBuilder cb, String workDate, Path&lt;String&gt; userId) &#123;</div><div class="line">                Subquery&lt;String&gt; subQuery = query.subquery(String.class);</div><div class="line">                Root&lt;ProdServParamPo&gt; param = subQuery.from(ProdServParamPo.class);</div><div class="line">                <span class="keyword">return</span> subQuery.select(param.&lt;String&gt;get(<span class="string">"userId"</span>)).where(</div><div class="line">                		cb.and(cb.equal(param.get(<span class="string">"userId"</span>), userId), </div><div class="line">                				cb.lessThanOrEqualTo(param.&lt;String&gt;get(<span class="string">"startDate"</span>), workDate), </div><div class="line">                				cb.greaterThanOrEqualTo(param.&lt;String&gt;get(<span class="string">"endDate"</span>), workDate)</div><div class="line">                		));</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		List&lt;ProdServItemDto&gt; items = <span class="keyword">new</span> ArrayList&lt;ProdServItemDto&gt;();</div><div class="line">		<span class="keyword">for</span>(ProdServInfoPo serv: list)&#123;</div><div class="line">			EnterpriseInfoPo ent = serv.getEnterpriseInfoPo();</div><div class="line">			ProdServItemDto item = <span class="keyword">new</span> ProdServItemDto();</div><div class="line">			item.setUserId(serv.getUserId());</div><div class="line">			item.setWrtrKind(serv.getWrtrKind());</div><div class="line">			item.setServProvType(serv.getServProvType());</div><div class="line">			item.setQq(ent.getQq());</div><div class="line">			item.setName(ent.getName());</div><div class="line">			item.setAddress(ent.getAddress());</div><div class="line">			item.setZipCode(ent.getZipCode());</div><div class="line">			item.setContractName(ent.getContractName());</div><div class="line">			item.setTelephone(ent.getTelephone());</div><div class="line">			item.setWrtrFileId(serv.getWrtrFileId());</div><div class="line">			items.add(item);</div><div class="line">		&#125;</div><div class="line">		logger.debug(<span class="string">"cost times is &#123;&#125; ms"</span>, (System.currentTimeMillis()-times));</div><div class="line">		<span class="keyword">return</span> items;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"><span class="comment">//expressions.add(cb.greaterThanOrEqualTo(root.&lt;Date&gt; get("createTs"), DateUtils.getStartDate(DateUtils.getDate(fromDate, YYYY_MM_DD))));</span></div><div class="line"><span class="comment">//expressions.add(cb.lessThanOrEqualTo(root.&lt;Date&gt; get("createTs"), DateUtils.getEndDate(DateUtils.getDate(toDate, YYYY_MM_DD))));</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">*公告查询,这里主要看根据roleIds 不同用户显示不同的公告</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> DataTablesResponseDto&lt;ArticleDto&gt; <span class="title">getArticlesForHome</span><span class="params">(<span class="keyword">final</span> ArticleSearchDto searchCriteria)</span> </span>&#123;</div><div class="line">Pageable pageable = PaginationUtil.buildPageable(searchCriteria,</div><div class="line">		PersistenceUtil.getIdName(ArticlePo.class));</div><div class="line">Specification&lt;ArticlePo&gt; specification = <span class="keyword">new</span> Specification&lt;ArticlePo&gt;() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;ArticlePo&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</div><div class="line">		Predicate predicate = cb.conjunction();</div><div class="line">		List&lt;Expression&lt;Boolean&gt;&gt; expressions = predicate.getExpressions();</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> != searchCriteria) &#123;</div><div class="line">			String nowDateStr = DateUtils.formatDate(<span class="keyword">new</span> Date(), ApplicationConsts.DATE_FORMAT);</div><div class="line">			EArticleStatus status = searchCriteria.getStatus();</div><div class="line">			EColumnCategory categoryId = searchCriteria.getCategoryId();</div><div class="line">			List&lt;Predicate&gt; predicateList = <span class="keyword">new</span> ArrayList&lt;Predicate&gt;();</div><div class="line">			List&lt;UserRolePo&gt; userRolePoList = userRoleRepository.findByUserId(securityContext</div><div class="line">					.getCurrentUserId());</div><div class="line"></div><div class="line">			<span class="keyword">for</span> (UserRolePo userRole : userRolePoList) &#123;</div><div class="line">				predicateList.add(cb.like(root.&lt;String&gt; get(<span class="string">"roleIds"</span>), <span class="string">"%"</span> + userRole.getRoleId()</div><div class="line">						+ <span class="string">"%"</span>));</div><div class="line">			&#125;</div><div class="line">			predicateList.add(cb.isNull(root.&lt;String&gt; get(<span class="string">"roleIds"</span>)));</div><div class="line"></div><div class="line">			Predicate[] predicate1 = <span class="keyword">new</span> Predicate[predicateList.size()];</div><div class="line">			Predicate predicate2 = cb.or(predicateList.toArray(predicate1));</div><div class="line">			expressions.add(predicate2);</div><div class="line"></div><div class="line">			expressions.add(cb.lessThanOrEqualTo(root.&lt;String&gt; get(<span class="string">"startDt"</span>), nowDateStr));</div><div class="line">			expressions.add(cb.greaterThanOrEqualTo(root.&lt;String&gt; get(<span class="string">"endDt"</span>), nowDateStr));</div><div class="line">			<span class="keyword">if</span> (EArticleStatus.ALL != status &amp;&amp; <span class="keyword">null</span> != status) &#123;</div><div class="line">				expressions.add(cb.equal(root.&lt;EArticleStatus&gt; get(<span class="string">"status"</span>), status));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (EColumnCategory.ALL != categoryId &amp;&amp; <span class="keyword">null</span> != categoryId) &#123;</div><div class="line">				expressions.add(cb.equal(root.&lt;EColumnCategory&gt; get(<span class="string">"categoryId"</span>), categoryId));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> predicate;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line">Page&lt;ArticlePo&gt; articlePos = articleRepository.findAll(specification, pageable);</div><div class="line">DataTablesResponseDto&lt;ArticleDto&gt; result = PaginationUtil.populateFromPage(articlePos,</div><div class="line">		<span class="keyword">new</span> Function&lt;ArticlePo, ArticleDto&gt;() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> ArticleDto <span class="title">apply</span><span class="params">(ArticlePo po)</span> </span>&#123;</div><div class="line">				ArticleDto articleDto = ConverterService.convert(po, ArticleDto.class);</div><div class="line">				<span class="keyword">return</span> articleDto;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line"><span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getSumInvstAmt</span><span class="params">(String acctNo, String productId)</span></span>&#123;</div><div class="line">	CriteriaBuilder cb = em.getCriteriaBuilder();</div><div class="line">	CriteriaQuery&lt;BigDecimal&gt; query = cb.createQuery(BigDecimal.class);</div><div class="line">	Root&lt;ProductSubscribeDtlPo&gt; root = query.from(ProductSubscribeDtlPo.class);</div><div class="line">	Expression&lt;BigDecimal&gt; subsAmtCm = cb.prod(root.&lt;BigDecimal&gt;get(<span class="string">"unitAmt"</span>), root.&lt;Long&gt;get(<span class="string">"unit"</span>).as(BigDecimal.class));</div><div class="line">	Expression&lt;BigDecimal&gt; sumSubAmtQuery = cb.sum(subsAmtCm);</div><div class="line">	Predicate predicate = cb.conjunction();</div><div class="line">	List&lt;Expression&lt;Boolean&gt;&gt; expressions = predicate.getExpressions();</div><div class="line">	<span class="keyword">if</span>(StringUtils.isNotBlank(acctNo))&#123;</div><div class="line">		expressions.add(cb.equal(root.&lt;String&gt;get(<span class="string">"acctNo"</span>), acctNo));</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(StringUtils.isNotBlank(productId))&#123;</div><div class="line">		expressions.add(cb.equal(root.&lt;String&gt;get(<span class="string">"productId"</span>), productId));</div><div class="line">	&#125;</div><div class="line">	query.select(sumSubAmtQuery);</div><div class="line">	query.where(predicate);</div><div class="line">	BigDecimal result = em.createQuery(query).getSingleResult();</div><div class="line">	<span class="keyword">return</span> result==<span class="keyword">null</span>?BigDecimal.ZERO:result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> List&lt;ProjectPo&gt; <span class="title">getProjectByFncrId</span><span class="params">(<span class="keyword">final</span> String fncrAcctNo)</span> </span>&#123;</div><div class="line">	List&lt;ProjectPo&gt; list = projectRepository.findAll(<span class="keyword">new</span> Specification&lt;ProjectPo&gt;() &#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;ProjectPo&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</div><div class="line">			Predicate predicate = cb.conjunction();</div><div class="line">			List&lt;Expression&lt;Boolean&gt;&gt; expressions = predicate.getExpressions();</div><div class="line">			expressions.add(cb.equal(root.&lt;String&gt; get(<span class="string">"fncrAcctNo"</span>), fncrAcctNo));</div><div class="line">			List&lt;EProjStatus&gt; inStatus = Arrays.asList(EProjStatus.INIT, EProjStatus.WRTR_AUDIT,</div><div class="line">					EProjStatus.RISK_AUDIT, EProjStatus.RISK_RATING, EProjStatus.PASSED);</div><div class="line">			expressions.add(root.&lt;EProjStatus&gt; get(<span class="string">"status"</span>).in(inStatus));</div><div class="line">			<span class="keyword">return</span> predicate;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">	<span class="keyword">return</span> list;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;SimpleMemberDto&gt; <span class="title">searchFncrMembers</span><span class="params">(<span class="keyword">final</span> String keyWord)</span> </span>&#123;</div><div class="line">	Sort sort = <span class="keyword">new</span> Sort(Direction.ASC, PersistenceUtil.getIdName(AcctPo.class));</div><div class="line">	Pageable pageable = <span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">20</span>, sort);</div><div class="line">	Page&lt;AcctPo&gt; page = acctRepository.findAll(<span class="keyword">new</span> Specification&lt;AcctPo&gt;() &#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;AcctPo&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</div><div class="line">			Predicate predicate = cb.conjunction();</div><div class="line">			List&lt;Expression&lt;Boolean&gt;&gt; expressions = predicate.getExpressions();</div><div class="line">			expressions.add(cb.exists(getSubQuery(query, cb, root.&lt;String&gt;get(<span class="string">"userId"</span>))));</div><div class="line">			String keyWordTrim = keyWord.trim();</div><div class="line">			<span class="keyword">if</span> (StringUtils.isNotBlank(keyWord)) &#123;</div><div class="line">				expressions.add(cb.or(</div><div class="line">						cb.like(root.&lt;String&gt; get(<span class="string">"acctNo"</span>), <span class="string">"%"</span> + keyWordTrim + <span class="string">"%"</span>),</div><div class="line">						cb.or(cb.like(root.&lt;UserPo&gt; get(<span class="string">"userPo"</span>).&lt;String&gt; get(<span class="string">"sname"</span>), <span class="string">"%"</span> + keyWordTrim</div><div class="line">								+ <span class="string">"%"</span>),</div><div class="line">								cb.like(root.&lt;UserPo&gt; get(<span class="string">"userPo"</span>).&lt;String&gt; get(<span class="string">"mobile"</span>), <span class="string">"%"</span> + keyWordTrim</div><div class="line">										+ <span class="string">"%"</span>))));</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				expressions.add(cb.equal(root.&lt;String&gt; get(<span class="string">"acctNo"</span>), <span class="string">"0"</span>));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> predicate;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">private</span> Subquery&lt;String&gt; <span class="title">getSubQuery</span><span class="params">(CriteriaQuery&lt;?&gt; query, </span></span></div><div class="line">				CriteriaBuilder cb, Path&lt;String&gt; userId) &#123;</div><div class="line">			Subquery&lt;String&gt; subQuery = query.subquery(String.class);</div><div class="line">			Root&lt;SimpleUserPo&gt; suser = subQuery.from(SimpleUserPo.class);</div><div class="line">			Join&lt;SimpleUserPo, FncrInfoPo&gt; fncrInfo = suser.join(<span class="string">"fncrInfoPo"</span>, JoinType.INNER);</div><div class="line">			<span class="keyword">return</span> subQuery.select(suser.&lt;String&gt;get(<span class="string">"userId"</span>)).where(</div><div class="line">					cb.and(cb.equal(suser.get(<span class="string">"userId"</span>), userId), </div><div class="line">							cb.equal(suser.get(<span class="string">"userId"</span>), fncrInfo.&lt;String&gt; get(<span class="string">"userId"</span>))));</div><div class="line">		&#125;</div><div class="line">	&#125;, pageable);</div><div class="line">	List&lt;SimpleMemberDto&gt; items = <span class="keyword">new</span> ArrayList&lt;SimpleMemberDto&gt;();</div><div class="line">	List&lt;AcctPo&gt; list = page.getContent();</div><div class="line">	<span class="keyword">for</span> (AcctPo acct : list) &#123;</div><div class="line">		SimpleMemberDto dto = <span class="keyword">new</span> SimpleMemberDto();</div><div class="line">		UserPo userPo = acct.getUserPo();</div><div class="line">		StringBuilder label = <span class="keyword">new</span> StringBuilder();</div><div class="line">		String sname = userPo.getSname();</div><div class="line">		String mobile = userPo.getMobile();</div><div class="line">		mobile = <span class="keyword">null</span> == mobile ? <span class="string">""</span>:mobile;</div><div class="line">		String acctNo = acct.getAcctNo();</div><div class="line">		dto.setAcctNo(acctNo);</div><div class="line">		dto.setSname(sname);</div><div class="line">		dto.setMobile(mobile);</div><div class="line">		label.append(<span class="string">"姓名:"</span>);</div><div class="line">		label.append(sname);</div><div class="line">		label.append(<span class="string">",手机号:"</span>);</div><div class="line">		label.append(mobile);</div><div class="line">		label.append(<span class="string">",交易账号:"</span>);</div><div class="line">		label.append(acctNo);</div><div class="line">		dto.setLabel(label.toString());</div><div class="line">		items.add(dto);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> items;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;GroupUserInfoDto&gt; <span class="title">getInvsUsers</span><span class="params">(<span class="keyword">final</span> GroupUserSearchDto searchDto)</span> </span>&#123;</div><div class="line">	Specification&lt;UserPo&gt; spec = <span class="keyword">new</span> Specification&lt;UserPo&gt;() &#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;UserPo&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</div><div class="line">			Predicate predicate = cb.conjunction();</div><div class="line">			List&lt;Expression&lt;Boolean&gt;&gt; expressions = predicate.getExpressions();</div><div class="line">			expressions.add(cb.not(cb.exists(getSubQuery(query, cb, searchDto.getGroupId(), root.&lt;String&gt; get(<span class="string">"userId"</span>)))));</div><div class="line">			<span class="keyword">if</span>(searchDto!=<span class="keyword">null</span>)&#123;</div><div class="line">				<span class="keyword">if</span>(StringUtils.isNotBlank(searchDto.getKeyWord()))&#123;</div><div class="line">					expressions.add(cb.or(</div><div class="line">						cb.like(root.&lt;String&gt;get(<span class="string">"sname"</span>), <span class="string">"%"</span>+searchDto.getKeyWord()+<span class="string">"%"</span>),</div><div class="line">						cb.like(root.&lt;String&gt;get(<span class="string">"nickName"</span>), <span class="string">"%"</span>+searchDto.getKeyWord()+<span class="string">"%"</span>),</div><div class="line">						cb.like(root.&lt;String&gt;get(<span class="string">"mobile"</span>), <span class="string">"%"</span>+searchDto.getKeyWord()+<span class="string">"%"</span>),</div><div class="line">						cb.exists(getWorkUnitSubQuery(query, cb, searchDto.getKeyWord(), root.&lt;String&gt; get(<span class="string">"userId"</span>)))</div><div class="line">					));</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span>&#123;</div><div class="line">					<span class="comment">// 未传关键字查询条件，则查询结果为空</span></div><div class="line">					expressions.add(cb.equal(root.&lt;String&gt;get(<span class="string">"userId"</span>),<span class="string">"0"</span>));</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> predicate;</div><div class="line">		&#125;</div><div class="line">		<span class="function"><span class="keyword">private</span> Subquery&lt;String&gt; <span class="title">getSubQuery</span><span class="params">(CriteriaQuery&lt;?&gt; query, </span></span></div><div class="line">				CriteriaBuilder cb, String groupId, Path&lt;String&gt; userId) &#123;</div><div class="line">			Subquery&lt;String&gt; subQuery = query.subquery(String.class);</div><div class="line">			Root&lt;GroupUserPo&gt; groupUsers = subQuery.from(GroupUserPo.class);</div><div class="line">			<span class="keyword">return</span> subQuery.select(groupUsers.&lt;String&gt;get(<span class="string">"userId"</span>)).where(</div><div class="line">					cb.and(cb.equal(groupUsers.&lt;String&gt; get(<span class="string">"groupId"</span>), groupId)), </div><div class="line">					cb.equal(groupUsers.&lt;String&gt; get(<span class="string">"userId"</span>), userId));</div><div class="line">		&#125;</div><div class="line">		<span class="function"><span class="keyword">private</span> Subquery&lt;String&gt; <span class="title">getWorkUnitSubQuery</span><span class="params">(CriteriaQuery&lt;?&gt; query, </span></span></div><div class="line">				CriteriaBuilder cb, String keyWord, Path&lt;String&gt; userId) &#123;</div><div class="line">			Subquery&lt;String&gt; subQuery = query.subquery(String.class);</div><div class="line">			Root&lt;PersonalInfoPo&gt; personalInfo = subQuery.from(PersonalInfoPo.class);</div><div class="line">			<span class="keyword">return</span> subQuery.select(personalInfo.&lt;String&gt;get(<span class="string">"userId"</span>)).where(</div><div class="line">					cb.equal(personalInfo.&lt;String&gt; get(<span class="string">"userId"</span>), userId),</div><div class="line">					cb.like(personalInfo.&lt;String&gt; get(<span class="string">"workUnit"</span>), <span class="string">"%"</span>+searchDto.getKeyWord()+<span class="string">"%"</span>));</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;;</div><div class="line">	List&lt;UserPo&gt; userList = userRepository.findAll(spec);</div><div class="line">	List&lt;GroupUserInfoDto&gt; dtoList = <span class="keyword">new</span> ArrayList&lt;GroupUserInfoDto&gt;();</div><div class="line">	<span class="keyword">for</span>(UserPo ur:userList)&#123;</div><div class="line">		GroupUserInfoDto dto = <span class="keyword">new</span> GroupUserInfoDto();</div><div class="line">		dto.setName(ur.getSname());</div><div class="line">		dto.setNickName(ur.getNickName());</div><div class="line">		dto.setUserType(ur.getUserType());</div><div class="line">		dto.setUserId(ur.getUserId());</div><div class="line">		<span class="keyword">if</span>(ur.getUserType() == EUserType.PERSON)&#123;</div><div class="line">			PersonalInfoPo persnoalInfo = personalInfoRepository.findOne(ur.getUserId());</div><div class="line">			<span class="keyword">if</span>(persnoalInfo!=<span class="keyword">null</span>)&#123;</div><div class="line">				dto.setWorkUnit(persnoalInfo.getWorkUnit());</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span>&#123;</div><div class="line">			dto.setWorkUnit(<span class="keyword">null</span>);</div><div class="line">		&#125;</div><div class="line">		dtoList.add(dto);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> dtoList;</div><div class="line">&#125;</div><div class="line">	</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * json</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> Specification&lt;Qfjbxxdz&gt; <span class="title">getWhereClause</span><span class="params">(<span class="keyword">final</span> JSONArray condetion,<span class="keyword">final</span> JSONArray search)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Specification&lt;Qfjbxxdz&gt;() &#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Qfjbxxdz&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</div><div class="line">			List&lt;Predicate&gt; predicate = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">			Iterator&lt;JSONObject&gt; iterator = condetion.iterator();</div><div class="line">			Predicate preP = <span class="keyword">null</span>;</div><div class="line">			<span class="keyword">while</span>(iterator.hasNext())&#123;</div><div class="line">				JSONObject jsonObject = iterator.next();</div><div class="line">				<span class="comment">//注意：这里用的root.join 因为我们要用qfjbxx对象里的字段作为条件就必须这样做join方法有很多重载，使用的时候可以多根据自己业务决断</span></div><div class="line">				Predicate p1 = cb.equal(root.join(<span class="string">"qfjbxx"</span>).get(<span class="string">"id"</span>).as(String.class),jsonObject.get(<span class="string">"fzId"</span>).toString());</div><div class="line">				Predicate p2 = cb.equal(root.get(<span class="string">"fzcc"</span>).as(String.class),jsonObject.get(<span class="string">"ccId"</span>).toString());</div><div class="line">				<span class="keyword">if</span>(preP!=<span class="keyword">null</span>)&#123;</div><div class="line">					preP = cb.or(preP,cb.and(p1,p2));</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					preP = cb.and(p1,p2);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			JSONObject jsonSearch=(JSONObject) search.get(<span class="number">0</span>);</div><div class="line">			Predicate p3=<span class="keyword">null</span>;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">null</span>!=jsonSearch.get(<span class="string">"xm"</span>)&amp;&amp;jsonSearch.get(<span class="string">"xm"</span>).toString().length()&gt;<span class="number">0</span>)&#123;</div><div class="line">			   p3=cb.like(root.join(<span class="string">"criminalInfo"</span>).get(<span class="string">"xm"</span>).as(String.class),<span class="string">"%"</span>+jsonSearch.get(<span class="string">"xm"</span>).toString()+<span class="string">"%"</span>);</div><div class="line">			&#125;</div><div class="line">			Predicate p4=<span class="keyword">null</span>;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">null</span>!=jsonSearch.get(<span class="string">"fzmc"</span>)&amp;&amp;jsonSearch.get(<span class="string">"fzmc"</span>).toString().length()&gt;<span class="number">0</span>)&#123;</div><div class="line">				p4=cb.like(root.join(<span class="string">"qfjbxx"</span>).get(<span class="string">"fzmc"</span>).as(String.class),<span class="string">"%"</span>+jsonSearch.get(<span class="string">"fzmc"</span>).toString()+<span class="string">"%"</span>);</div><div class="line">			&#125;</div><div class="line">			Predicate preA;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">null</span>!=p3&amp;&amp;<span class="keyword">null</span>!=p4)&#123;</div><div class="line">				Predicate  preS =cb.and(p3,p4);</div><div class="line">				preA =cb.and(preP,preS);</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">null</span>==p3&amp;&amp;<span class="keyword">null</span>!=p4)&#123;</div><div class="line">				preA=cb.and(preP,p4);</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">null</span>!=p3&amp;&amp;<span class="keyword">null</span>==p4)&#123;</div><div class="line">				preA=cb.and(preP,p3);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				preA=preP;</div><div class="line">			&#125;</div><div class="line">			predicate.add(preA);</div><div class="line">			Predicate[] pre = <span class="keyword">new</span> Predicate[predicate.size()];</div><div class="line">			query.where(predicate.toArray(pre));</div><div class="line">			<span class="keyword">return</span> query.getRestriction();</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> List&lt;SubAcctTrxJnlPo&gt; <span class="title">getRechargeList</span><span class="params">(<span class="keyword">final</span> String trxDate, <span class="keyword">final</span> String serviceCenterId)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> subAcctTrxJnlRepository.findAll(<span class="keyword">new</span> Specification&lt;SubAcctTrxJnlPo&gt;() &#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;SubAcctTrxJnlPo&gt; root, CriteriaQuery&lt;?&gt; query,</span></span></div><div class="line">				CriteriaBuilder cb) &#123;</div><div class="line">			Predicate predicate = cb.conjunction();</div><div class="line">			List&lt;Expression&lt;Boolean&gt;&gt; expressions = predicate.getExpressions();</div><div class="line">			expressions</div><div class="line">					.add(cb.exists(getSubQuery(query, cb, root.&lt;String&gt; get(<span class="string">"acctNo"</span>), serviceCenterId)));</div><div class="line">			expressions.add(cb.equal(root.&lt;String&gt; get(<span class="string">"trxDate"</span>), trxDate));</div><div class="line">			expressions.add(cb.equal(root.&lt;String&gt; get(<span class="string">"useType"</span>), EUseType.RECHARGE));</div><div class="line">			<span class="keyword">return</span> predicate;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">private</span> Subquery&lt;String&gt; <span class="title">getSubQuery</span><span class="params">(CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb,</span></span></div><div class="line">				Path&lt;String&gt; acctNo, String serviceCenterId) &#123;</div><div class="line">			Subquery&lt;String&gt; subQuery = query.subquery(String.class);</div><div class="line">			Root&lt;AcctPo&gt; rAcct = subQuery.from(AcctPo.class);</div><div class="line">			Root&lt;InvestorInfoPo&gt; rInvestor = subQuery.from(InvestorInfoPo.class);</div><div class="line">			<span class="keyword">return</span> subQuery.select(rAcct.&lt;String&gt; get(<span class="string">"acctNo"</span>))</div><div class="line">					.where(cb.and(cb.equal(rAcct.&lt;String&gt; get(<span class="string">"acctNo"</span>), acctNo),</div><div class="line">							cb.equal(rAcct.&lt;String&gt; get(<span class="string">"userId"</span>), rInvestor.&lt;String&gt; get(<span class="string">"userId"</span>)),</div><div class="line">							cb.equal(rInvestor.&lt;String&gt; get(<span class="string">"serviceCenterId"</span>), serviceCenterId)));</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;AcctDto&gt; <span class="title">getAcctInfoList</span><span class="params">(<span class="keyword">final</span> List&lt;String&gt; userIdList, </span></span></div><div class="line">		<span class="keyword">final</span> List&lt;String&gt; groupIds, <span class="keyword">final</span> List&lt;EBizRole&gt; bizRoles)&#123;</div><div class="line">	Specification&lt;AcctPo&gt; spec = <span class="keyword">new</span> Specification&lt;AcctPo&gt;() &#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;AcctPo&gt; root, CriteriaQuery&lt;?&gt; query,	CriteriaBuilder cb)</span> </span>&#123;</div><div class="line">			Predicate predicate = cb.conjunction();</div><div class="line">			List&lt;Expression&lt;Boolean&gt;&gt; expressions = predicate.getExpressions();</div><div class="line">			<span class="keyword">if</span>(userIdList!=<span class="keyword">null</span>&amp;&amp;!userIdList.isEmpty())&#123;</div><div class="line">				expressions.add(root.&lt;String&gt;get(<span class="string">"userId"</span>).in(userIdList));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(bizRoles!=<span class="keyword">null</span> &amp;&amp; !bizRoles.isEmpty())&#123;</div><div class="line">				expressions.add(cb.exists(getRolesSubQuery(query, cb, </div><div class="line">						root.&lt;String&gt;get(<span class="string">"userId"</span>), getRoleIds(bizRoles))));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(groupIds!=<span class="keyword">null</span> &amp;&amp; !groupIds.isEmpty())&#123;</div><div class="line">				expressions.add(cb.exists(getGroupsSubQuery(query, cb, </div><div class="line">						root.&lt;String&gt;get(<span class="string">"userId"</span>), getGroupIds(groupIds))));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> predicate;</div><div class="line">		&#125;</div><div class="line">		<span class="function"><span class="keyword">private</span> Subquery&lt;String&gt; <span class="title">getRolesSubQuery</span><span class="params">(CriteriaQuery&lt;?&gt; query, </span></span></div><div class="line">				CriteriaBuilder cb, Path&lt;String&gt; userId, Set&lt;String&gt; roleIds) &#123;</div><div class="line">			Subquery&lt;String&gt; subQuery = query.subquery(String.class);</div><div class="line">			Root&lt;UserRolePo&gt; param = subQuery.from(UserRolePo.class);</div><div class="line">			<span class="keyword">return</span> subQuery.select(param.&lt;String&gt;get(<span class="string">"userId"</span>)).where(</div><div class="line">					cb.and(cb.equal(param.get(<span class="string">"userId"</span>), userId),</div><div class="line">						   param.&lt;String&gt;get(<span class="string">"roleId"</span>).in(roleIds)</div><div class="line">			));</div><div class="line">		&#125;</div><div class="line">		<span class="function"><span class="keyword">private</span> Subquery&lt;String&gt; <span class="title">getGroupsSubQuery</span><span class="params">(CriteriaQuery&lt;?&gt; query, </span></span></div><div class="line">				CriteriaBuilder cb, Path&lt;String&gt; userId, Set&lt;String&gt; groupIds) &#123;</div><div class="line">			Subquery&lt;String&gt; subQuery = query.subquery(String.class);</div><div class="line">			Root&lt;GroupUserPo&gt; param = subQuery.from(GroupUserPo.class);</div><div class="line">			<span class="keyword">return</span> subQuery.select(param.&lt;String&gt;get(<span class="string">"userId"</span>)).where(</div><div class="line">					cb.and(cb.equal(param.get(<span class="string">"userId"</span>), userId),</div><div class="line">						   param.&lt;String&gt;get(<span class="string">"groupId"</span>).in(groupIds)</div><div class="line">			));</div><div class="line">		&#125;</div><div class="line">		<span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">getRoleIds</span><span class="params">(List&lt;EBizRole&gt; bizRoles)</span></span>&#123;</div><div class="line">			Set&lt;String&gt; sets = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">			<span class="keyword">for</span>(EBizRole role:bizRoles)&#123;</div><div class="line">				sets.add(role.getRoleId());</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> sets;</div><div class="line">		&#125;</div><div class="line">		<span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">getGroupIds</span><span class="params">(List&lt;String&gt; groupIds)</span></span>&#123;</div><div class="line">			Set&lt;String&gt; sets = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">			<span class="keyword">for</span>(String gid:groupIds)&#123;</div><div class="line">				sets.add(gid);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> sets;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	List&lt;AcctPo&gt; list = acctRepo.findAll(spec);</div><div class="line">	<span class="keyword">return</span> packItems(list);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div
    
    </summary>
    
      <category term="工作" scheme="https://wo6x5a.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="java" scheme="https://wo6x5a.github.io/tags/java/"/>
    
      <category term="spring data jpa" scheme="https://wo6x5a.github.io/tags/spring-data-jpa/"/>
    
  </entry>
  
  <entry>
    <title>java 线程池的使用</title>
    <link href="https://wo6x5a.github.io/2017/03/27/java-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://wo6x5a.github.io/2017/03/27/java-线程池的使用/</id>
    <published>2017-03-27T09:25:25.000Z</published>
    <updated>2017-03-30T02:36:33.558Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 线程池.</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> chenwulou</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadPool</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 下面解释下一下构造器中各个参数的含义：</div><div class="line">	 * </div><div class="line">	 * corePoolSize：核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，&lt;/br&gt;</div><div class="line">	 * 线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()</div><div class="line">	 * 或者prestartCoreThread()方法，&lt;/br&gt;</div><div class="line">	 * 从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。&lt;/br&gt;</div><div class="line">	 * 默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，</div><div class="line">	 * 当线程池中的线程数目达到corePoolSize后，&lt;/br&gt;</div><div class="line">	 * 就会把到达的任务放到缓存队列当中；&lt;/br&gt;</div><div class="line">	 * maximumPoolSize：线程池最大线程数，这个参数也是一个非常重要的参数，它表示在线程池中最多能创建多少个线程；&lt;/br&gt;</div><div class="line">	 * keepAliveTime：表示线程没有任务执行时最多保持多久时间会终止。&lt;/br&gt;</div><div class="line">	 * 默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，&lt;/br&gt;</div><div class="line">	 * 直到线程池中的线程数不大于corePoolSize，即当线程池中的线程数大于corePoolSize时，&lt;/br&gt;</div><div class="line">	 * 如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。&lt;/br&gt;</div><div class="line">	 * 但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，&lt;/br&gt;</div><div class="line">	 * keepAliveTime参数也会起作用，直到线程池中的线程数为0；&lt;/br&gt;</div><div class="line">	 * unit：参数keepAliveTime的时间单位，有7种取值，在TimeUnit类中有7种静态属性：&lt;/br&gt;</div><div class="line">	 * TimeUnit.DAYS; //天&lt;/br&gt;</div><div class="line">	 * TimeUnit.HOURS; //小时&lt;/br&gt;</div><div class="line">	 * TimeUnit.MINUTES; //分钟&lt;/br&gt;</div><div class="line">	 * TimeUnit.SECONDS; //秒&lt;/br&gt;</div><div class="line">	 * TimeUnit.MILLISECONDS; //毫秒&lt;/br&gt;</div><div class="line">	 * TimeUnit.MICROSECONDS; //微妙&lt;/br&gt;</div><div class="line">	 * TimeUnit.NANOSECONDS; //纳秒&lt;/br&gt;</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@param</span> args</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//自动创建线程池</span></div><div class="line"><span class="comment">//		ExecutorService executorService = Executors.newCachedThreadPool();</span></div><div class="line"><span class="comment">//		ExecutorService executorService = Executors.newSingleThreadExecutor();</span></div><div class="line"><span class="comment">//		ExecutorService executorService = Executors.newFixedThreadPool(3);</span></div><div class="line">		ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">15</span>, <span class="number">200</span>, TimeUnit.MILLISECONDS,</div><div class="line">				<span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">5</span>));</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</div><div class="line">			MyTask myTask = <span class="keyword">new</span> MyTask(i);</div><div class="line"><span class="comment">//			Thread t = new Thread(myTask);</span></div><div class="line">			<span class="comment">//设置优先级</span></div><div class="line"><span class="comment">//			t.setPriority(1);</span></div><div class="line">			executor.execute(myTask);</div><div class="line">			System.out.println(<span class="string">"线程池中线程数目："</span> + executor.getPoolSize() + <span class="string">"，队列中等待执行的任务数目："</span></div><div class="line">					+ executor.getQueue().size() + <span class="string">"，已执行完毕的任务数目："</span> + executor.getCompletedTaskCount());</div><div class="line">		&#125;</div><div class="line">		executor.shutdown();</div><div class="line"><span class="comment">//		executor.shutdownNow();</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> taskNum;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.taskNum = num;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"正在执行task "</span> + taskNum);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//			Thread.sleep(10);</span></div><div class="line">			Thread.currentThread().sleep(<span class="number">10</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"task "</span> + taskNum + <span class="string">"执行完毕"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div
    
    </summary>
    
      <category term="技术" scheme="https://wo6x5a.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="https://wo6x5a.github.io/tags/java/"/>
    
      <category term="线程池" scheme="https://wo6x5a.github.io/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>java内存溢出总结</title>
    <link href="https://wo6x5a.github.io/2017/03/27/java%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E6%80%BB%E7%BB%93/"/>
    <id>https://wo6x5a.github.io/2017/03/27/java内存溢出总结/</id>
    <published>2017-03-27T09:06:24.000Z</published>
    <updated>2017-03-30T02:36:41.029Z</updated>
    
    <content type="html"><![CDATA[<p>首先我们来说说java虚拟机的构成吧:</p>
<p>他是由程序计数器,堆,java虚拟机栈,本地方法栈,方法区这几块构成的,</p>
<ul>
<li>堆是用来存放对象和数组的,这里我们就可以设计一个无限创造对象来模拟堆溢出.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line"> * 堆溢出 </div><div class="line"></div><div class="line"> * Exception in thread "main" java.lang.OutOfMemoryError: Java heap space</div><div class="line"></div><div class="line"> * <span class="doctag">@author</span> chenwulou</div><div class="line"></div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapLeak</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            list.add(<span class="keyword">new</span> HeapLeak.method());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">method</span> </span>&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>栈是用来存放基本数据类型，对象引用，方法等等这些东西的,这里我们就能用无限递归来模拟栈溢出</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line"> * 栈溢出</div><div class="line"></div><div class="line"> * Exception in thread "main" java.lang.StackOverflowError</div><div class="line"></div><div class="line"> * <span class="doctag">@author</span> chenwulou</div><div class="line"></div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackLeak</span> </span>&#123;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line"> method();</div><div class="line"></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"> method();</div><div class="line"></div><div class="line"> &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>方法区用来存放每个class的结构,比如说运行时常量池、域、方法数据、方法体、构造函数、包括类中的专用方法、实例初始化、接口初始化。cglib可以直接操作字节码，也可以动态产生Class，下面通过cglib来演示。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</div><div class="line"></div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line"> * 方法区溢出</div><div class="line"></div><div class="line"> * Exception in thread "main" java.lang.NoClassDefFoundError</div><div class="line"></div><div class="line"> * <span class="doctag">@author</span> chenwulou</div><div class="line"></div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodAreaLeak</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line"></div><div class="line">    Enhancer enhancer = <span class="keyword">new</span> Enhancer();</div><div class="line">    </div><div class="line">    enhancer.setSuperclass(OOMObject.class);</div><div class="line">    </div><div class="line">    enhancer.setUseCache(<span class="keyword">false</span>);</div><div class="line">    </div><div class="line">    enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</div><div class="line">    </div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span></span></div><div class="line">        </div><div class="line">        <span class="keyword">throws</span> Throwable &#123;</div><div class="line">        </div><div class="line">            <span class="keyword">return</span> proxy.invokeSuper(obj, args);</div><div class="line">        </div><div class="line">        &#125;</div><div class="line">    </div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    enhancer.create();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OOMObject</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先我们来说说java虚拟机的构成吧:&lt;/p&gt;
&lt;p&gt;他是由程序计数器,堆,java虚拟机栈,本地方法栈,方法区这几块构成的,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;堆是用来存放对象和数组的,这里我们就可以设计一个无限创造对象来模拟堆溢出.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure cla
    
    </summary>
    
      <category term="技术" scheme="https://wo6x5a.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="https://wo6x5a.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>spring事务的隔离级别和传播属性</title>
    <link href="https://wo6x5a.github.io/2017/03/27/spring%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%92%8C%E4%BC%A0%E6%92%AD%E5%B1%9E%E6%80%A7/"/>
    <id>https://wo6x5a.github.io/2017/03/27/spring事务的隔离级别和传播属性/</id>
    <published>2017-03-27T08:08:25.000Z</published>
    <updated>2017-03-30T02:38:02.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于事务的理解,在日常的开发过程中,相对来说还是比较重要的.不同的业务功能,所需要的事务传播属性以及隔离级别都是不一样的,当然,大多数情况下,我们使用默认的配置就行了,但是,某些特殊情境,我们就需要特殊配置.这里我就大概来说一说事务.</p>
<ul>
<li><p>事务的传播属性:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line">* Support a current transaction, create a new one if none exists.</div><div class="line"></div><div class="line">* Analogous to EJB transaction attribute of the same name.</div><div class="line"></div><div class="line">* &lt;p&gt;This is the default setting of a transaction annotation.</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">// 支持当前事务,如果没有,创建一个新事务.(默认属性,也是最常用的)</span></div><div class="line">REQUIRED(TransactionDefinition.PROPAGATION_REQUIRED),</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line">* Support a current transaction, execute non-transactionally if none exists.</div><div class="line"></div><div class="line">* Analogous to EJB transaction attribute of the same name.</div><div class="line"></div><div class="line">* &lt;p&gt;Note: For transaction managers with transaction synchronization,</div><div class="line"></div><div class="line">* PROPAGATION_SUPPORTS is slightly different from no transaction at all,</div><div class="line"></div><div class="line">* as it defines a transaction scope that synchronization will apply for.</div><div class="line"></div><div class="line">* As a consequence, the same resources (JDBC Connection, Hibernate Session, etc)</div><div class="line"></div><div class="line">* will be shared for the entire specified scope. Note that this depends on</div><div class="line"></div><div class="line">* the actual synchronization configuration of the transaction manager.</div><div class="line"></div><div class="line">* <span class="doctag">@see</span>  org.springframework.transaction.support.AbstractPlatformTransactionManager#setTransactionSynchronization</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">//支持当前事务,如果没有事务,就以非事务状态执行</span></div><div class="line">SUPPORTS(TransactionDefinition.PROPAGATION_SUPPORTS),</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line">* Support a current transaction, throw an exception if none exists.</div><div class="line"></div><div class="line">* Analogous to EJB transaction attribute of the same name.</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">//支持当前事务,如果没有事务,抛出异常</span></div><div class="line">MANDATORY(TransactionDefinition.PROPAGATION_MANDATORY),</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line">* Create a new transaction, suspend the current transaction if one exists.</div><div class="line"></div><div class="line">* Analogous to EJB transaction attribute of the same name.</div><div class="line"></div><div class="line">* &lt;p&gt;Note: Actual transaction suspension will not work on out-of-the-box</div><div class="line"></div><div class="line">* on all transaction managers. This in particular applies to JtaTransactionManager,</div><div class="line"></div><div class="line">* which requires the &#123;<span class="doctag">@code</span>  javax.transaction.TransactionManager&#125; to be</div><div class="line"></div><div class="line">* made available it to it (which is server-specific in standard J2EE).</div><div class="line"></div><div class="line">* <span class="doctag">@see</span>  org.springframework.transaction.jta.JtaTransactionManager#setTransactionManager</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">//新建事务,若当前存在事务,则挂起当前事务</span></div><div class="line">REQUIRES_NEW(TransactionDefinition.PROPAGATION_REQUIRES_NEW),</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line">* Execute non-transactionally, suspend the current transaction if one exists.</div><div class="line"></div><div class="line">* Analogous to EJB transaction attribute of the same name.</div><div class="line"></div><div class="line">* &lt;p&gt;Note: Actual transaction suspension will not work on out-of-the-box</div><div class="line"></div><div class="line">* on all transaction managers. This in particular applies to JtaTransactionManager,</div><div class="line"></div><div class="line">* which requires the &#123;<span class="doctag">@code</span>  javax.transaction.TransactionManager&#125; to be</div><div class="line"></div><div class="line">* made available it to it (which is server-specific in standard J2EE).</div><div class="line"></div><div class="line">* <span class="doctag">@see</span>  org.springframework.transaction.jta.JtaTransactionManager#setTransactionManager</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">//以非事务方式执行.若当前存在事务,则挂起当前事务</span></div><div class="line">NOT_SUPPORTED(TransactionDefinition.PROPAGATION_NOT_SUPPORTED),</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line">* Execute non-transactionally, throw an exception if a transaction exists.</div><div class="line"></div><div class="line">* Analogous to EJB transaction attribute of the same name.</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">//以非事务方式执行.若当前存在事务,则跑出异常</span></div><div class="line">NEVER(TransactionDefinition.PROPAGATION_NEVER),</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line">* Execute within a nested transaction if a current transaction exists,</div><div class="line"></div><div class="line">* behave like PROPAGATION_REQUIRED else. There is no analogous feature in EJB.</div><div class="line"></div><div class="line">* &lt;p&gt;Note: Actual creation of a nested transaction will only work on specific</div><div class="line"></div><div class="line">* transaction managers. Out of the box, this only applies to the JDBC</div><div class="line"></div><div class="line">* DataSourceTransactionManager when working on a JDBC 3.0 driver.</div><div class="line"></div><div class="line">* Some JTA providers might support nested transactions as well.</div><div class="line"></div><div class="line">* <span class="doctag">@see</span> org.springframework.jdbc.datasource.DataSourceTransactionManager</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">//执行嵌套事务,如果当前存在事务</span></div><div class="line">NESTED(TransactionDefinition.PROPAGATION_NESTED);</div></pre></td></tr></table></figure>
</li>
<li><p>事务的隔离级别:</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line">* Use the default isolation level of the underlying datastore.</div><div class="line"></div><div class="line">* All other levels correspond to the JDBC isolation levels.</div><div class="line"></div><div class="line">* <span class="doctag">@see</span> java.sql.Connection</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">//使用数据库默认的隔离级别</span></div><div class="line">DEFAULT(TransactionDefinition.ISOLATION_DEFAULT),</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line">* A constant indicating that dirty reads, non-repeatable reads and phantom reads</div><div class="line"></div><div class="line">* can occur. This level allows a row changed by one transaction to be read by</div><div class="line"></div><div class="line">* another transaction before any changes in that row have been committed</div><div class="line"></div><div class="line">* (a "dirty read"). If any of the changes are rolled back, the second</div><div class="line"></div><div class="line">* transaction will have retrieved an invalid row.</div><div class="line"></div><div class="line">* <span class="doctag">@see</span> java.sql.Connection#TRANSACTION_READ_UNCOMMITTED</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">//读取未提交数据(级别最低,允许事务读取另一个事务未提交的数据)</span></div><div class="line">READ_UNCOMMITTED(TransactionDefinition.ISOLATION_READ_UNCOMMITTED),</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line">* A constant indicating that dirty reads are prevented; non-repeatable reads</div><div class="line"></div><div class="line">* and phantom reads can occur. This level only prohibits a transaction</div><div class="line"></div><div class="line">* from reading a row with uncommitted changes in it.</div><div class="line"></div><div class="line">* <span class="doctag">@see</span> java.sql.Connection#TRANSACTION_READ_COMMITTED</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">//读取提交数据(允许事务读取另一个事务提交的数据)</span></div><div class="line">READ_COMMITTED(TransactionDefinition.ISOLATION_READ_COMMITTED),</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line">* A constant indicating that dirty reads and non-repeatable reads are</div><div class="line"></div><div class="line">* prevented; phantom reads can occur. This level prohibits a transaction</div><div class="line"></div><div class="line">* from reading a row with uncommitted changes in it, and it also prohibits</div><div class="line"></div><div class="line">* the situation where one transaction reads a row, a second transaction</div><div class="line"></div><div class="line">* alters the row, and the first transaction rereads the row, getting</div><div class="line"></div><div class="line">* different values the second time (a "non-repeatable read").</div><div class="line"></div><div class="line">* <span class="doctag">@see</span> java.sql.Connection#TRANSACTION_REPEATABLE_READ</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//可重复读</span></div><div class="line">REPEATABLE_READ(TransactionDefinition.ISOLATION_REPEATABLE_READ),</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line">* A constant indicating that dirty reads, non-repeatable reads and phantom</div><div class="line"></div><div class="line">* reads are prevented. This level includes the prohibitions in</div><div class="line"></div><div class="line">* &#123;<span class="doctag">@code</span> ISOLATION_REPEATABLE_READ&#125; and further prohibits the situation</div><div class="line"></div><div class="line">* where one transaction reads all rows that satisfy a &#123;<span class="doctag">@code</span> WHERE&#125;</div><div class="line"></div><div class="line">* condition, a second transaction inserts a row that satisfies that</div><div class="line"></div><div class="line">* &#123;<span class="doctag">@code</span> WHERE&#125; condition, and the first transaction rereads for the</div><div class="line"></div><div class="line">* same condition, retrieving the additional "phantom" row in the second read.</div><div class="line"></div><div class="line">* <span class="doctag">@see</span> java.sql.Connection#TRANSACTION_SERIALIZABLE</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//顺序执行读取(级别最高,最可靠)</span></div><div class="line">SERIALIZABLE(TransactionDefinition.ISOLATION_SERIALIZABLE);</div></pre></td></tr></table></figure>
<p>下面整理一张表.</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">丢失更新</th>
<th style="text-align:center">脏读</th>
<th style="text-align:center">非重复读</th>
<th style="text-align:center">覆盖更新</th>
<th style="text-align:center">幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">未提交读</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">已提交读</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">可重复读</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">串行化(顺序读)</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
</tbody>
</table>
<ul>
<li>名词解释</li>
</ul>
<p><strong>未提交读</strong>:允许读取未提交数据,如果一个事务已经开始写数据，则另外一个事务则不允许同时进行写操作，但允许其他事务读此行数据。</p>
<p><strong>已提交读</strong>:当一个事务开始了,则只有等这个事务提交结束了,才允许其他事务读,</p>
<p><strong>可重复读</strong>: 读取数据的事务将会禁止写事务（但允许读事务），写事务则禁止任何其他事务</p>
<p><strong>串行化读</strong>:按照顺序,一个事务一个事务的执行.</p>
<p><strong>丢失更新</strong>:撤销一个事务时，把其他事务已提交的更新数据覆盖（A和B事务并发执行，A事务执行更新后，提交；B事务在A事务更新后，B事务结束前也做了对该行数据的更新操作，然后回滚，则两次更新操作都丢失了）。</p>
<p><strong>脏读</strong>:一个事务读到另一个事务未提交的更新数据（事务T1将某一值修改，然后事务T2读取该值，此后T1因为某种原因撤销对该值的修改，这就导致了T2所读取到的数据是无效的）。</p>
<p><strong>不可重复读</strong>:一个事务读到另一个事务已提交的更新数据（一个事务范围内两个相同的查询却返回了不同数据。这是由于查询时系统中其他事务修改的提交而引起的。比如事务T1读取某一数据，事务T2读取并修改了该数据，T1为了对读取值进行检验而再次读取该数据，便得到了不同的结果）。</p>
<p><strong>覆盖更新</strong>:这是不可重复读中的特例，一个事务覆盖另一个事务已提交的更新数据（即A事务更新数据，然后B事务更新该数据，A事务查询发现自己更新的数据变了）。</p>
<p><strong>虚读（幻读）</strong>:一个事务读到另一个事务已提交的新插入的数据（A和B事务并发执行，A事务查询数据，B事务插入或者删除数据，A事务再次查询发现结果集中有以前没有的数据或者以前有的数据消失了）。</p>
<p>oracle 支持<strong>Read Committed</strong>和 <strong>Serializable</strong>和<strong>oracle特有的Read-only</strong> 这三种事务隔离级别,<strong>默认Read Committed</strong></p>
<p>mysql支持<strong>Read Uncommitted, Read Committed, Repeatable Read,Serializable, 默认Repeatable Read</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;对于事务的理解,在日常的开发过程中,相对来说还是比较重要的.不同的业务功能,所需要的事务传播属性以及隔离级别都是不一样的,当然,大多数情况下
    
    </summary>
    
      <category term="技术" scheme="https://wo6x5a.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="https://wo6x5a.github.io/tags/java/"/>
    
      <category term="spring" scheme="https://wo6x5a.github.io/tags/spring/"/>
    
      <category term="事务" scheme="https://wo6x5a.github.io/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>对象拷贝类PropertyUtils，BeanUtils，BeanCopier</title>
    <link href="https://wo6x5a.github.io/2017/03/27/%E5%AF%B9%E8%B1%A1%E6%8B%B7%E8%B4%9D%E7%B1%BBPropertyUtils%EF%BC%8CBeanUtils%EF%BC%8CBeanCopier/"/>
    <id>https://wo6x5a.github.io/2017/03/27/对象拷贝类PropertyUtils，BeanUtils，BeanCopier/</id>
    <published>2017-03-27T07:42:15.000Z</published>
    <updated>2017-03-30T02:38:06.957Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目前流行的较为公用认可的工具类："><a href="#目前流行的较为公用认可的工具类：" class="headerlink" title="目前流行的较为公用认可的工具类："></a>目前流行的较为公用认可的工具类：</h3><h4 id="Apache的两个版本：（反射机制）"><a href="#Apache的两个版本：（反射机制）" class="headerlink" title="Apache的两个版本：（反射机制）"></a>Apache的两个版本：（反射机制）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">org.apache.commons.beanutils.PropertyUtils.copyProperties(Object dest, Object orig)</div><div class="line">org.apache.commons.beanutils.BeanUtils.copyProperties(Object dest, Object orig)</div></pre></td></tr></table></figure>
<h4 id="Spring版本：（反射机制）"><a href="#Spring版本：（反射机制）" class="headerlink" title="Spring版本：（反射机制）"></a>Spring版本：（反射机制）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.springframework.beans.BeanUtils.copyProperties(Object source, Object target, Class editable, String[] ignoreProperties)</div></pre></td></tr></table></figure>
<h4 id="cglib版本：（使用动态代理，效率高）"><a href="#cglib版本：（使用动态代理，效率高）" class="headerlink" title="cglib版本：（使用动态代理，效率高）"></a>cglib版本：（使用动态代理，效率高）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net.sf.cglib.beans.BeanCopier.copy(Object paramObject1, Object paramObject2, Converter paramConverter)</div></pre></td></tr></table></figure>
<h3 id="原理简介"><a href="#原理简介" class="headerlink" title="原理简介"></a>原理简介</h3><h4 id="反射类型：（apache）"><a href="#反射类型：（apache）" class="headerlink" title="反射类型：（apache）"></a>反射类型：（apache）</h4><p>都使用静态类调用，最终转化虚拟机中两个单例的工具对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">BeanUtilsBean</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">this</span>(<span class="keyword">new</span> ConvertUtilsBean(), <span class="keyword">new</span> PropertyUtilsBean());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ConvertUtilsBean可以通过ConvertUtils全局自定义注册。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ConvertUtils.register(<span class="keyword">new</span> DateConvert(), java.util.Date.class);</div></pre></td></tr></table></figure></p>
<p>PropertyUtilsBean的copyProperties方法实现了拷贝的算法。<br>1、  动态bean：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">orig <span class="keyword">instanceof</span> DynaBean：Object value = ((DynaBean)orig).get(name);</div></pre></td></tr></table></figure></p>
<p>然后把value复制到动态bean类<br>2、  Map类型：orig instanceof Map：key值逐个拷贝<br>3、  其他普通类：：从beanInfo【每一个对象都有一个缓存的bean信息，包含属性字段等】取出name，然后把sourceClass和targetClass逐个拷贝</p>
<h4 id="Cglib类型：BeanCopier"><a href="#Cglib类型：BeanCopier" class="headerlink" title="Cglib类型：BeanCopier"></a>Cglib类型：BeanCopier</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">copier = BeanCopier.create(source.getClass(), target.getClass(), <span class="keyword">false</span>);</div><div class="line">copier.copy(source, target, <span class="keyword">null</span>);</div></pre></td></tr></table></figure>
<p>Create对象过程：产生sourceClass-》TargetClass的拷贝代理类，放入jvm中，所以创建的代理类的时候比较耗时。最好保证这个对象的单例模式，可以参照最后一部分的优化方案。<br>创建过程：源代码见<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jdk：net.sf.cglib.beans.BeanCopier.Generator.generateClass(ClassVisitor)</div></pre></td></tr></table></figure></p>
<p>1、  获取sourceClass的所有public get 方法-》PropertyDescriptor[] getters<br>2、  获取TargetClass 的所有 public set 方法-》PropertyDescriptor[] setters<br>3、  遍历setters的每一个属性，执行4和5<br>4、  按setters的name生成sourceClass的所有setter方法-》PropertyDescriptor getter【不符合javabean规范的类将会可能出现空指针异常】<br>5、  PropertyDescriptor[] setters-》PropertyDescriptor setter<br>6、  将setter和getter名字和类型 配对，生成代理类的拷贝方法。<br>Copy属性过程：调用生成的代理类，代理类的代码和手工操作的代码很类似，效率非常高。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目前流行的较为公用认可的工具类：&quot;&gt;&lt;a href=&quot;#目前流行的较为公用认可的工具类：&quot; class=&quot;headerlink&quot; title=&quot;目前流行的较为公用认可的工具类：&quot;&gt;&lt;/a&gt;目前流行的较为公用认可的工具类：&lt;/h3&gt;&lt;h4 id=&quot;Apache的两个
    
    </summary>
    
      <category term="技术" scheme="https://wo6x5a.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="https://wo6x5a.github.io/tags/java/"/>
    
      <category term="反射" scheme="https://wo6x5a.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>grunt安装和使用</title>
    <link href="https://wo6x5a.github.io/2017/03/27/grunt%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://wo6x5a.github.io/2017/03/27/grunt安装和使用/</id>
    <published>2017-03-27T07:23:15.000Z</published>
    <updated>2017-03-30T02:35:00.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装grunt"><a href="#安装grunt" class="headerlink" title="安装grunt"></a>安装grunt</h2><p>Grunt运行离不开NodeJS和NPM。因此要使用Grunt首要的条件，你的系统需要安装NodeJS和NPM。</p>
<blockquote>
<ul>
<li>安装NodeJS</li>
</ul>
</blockquote>
<p>node安装的方法很多，如果是wiondow系统,可以直接进入Nodejs官网中下载各系统所需要的安装包进行安装。</p>
<blockquote>
<ul>
<li>安装NPM</li>
</ul>
</blockquote>
<p>装好NodeJS后，可以在你的终端执行下面的命令安装NPM:</p>
<p>curl <a href="http://npmjs.org/install.sh" target="_blank" rel="external">http://npmjs.org/install.sh</a> | sh</p>
<p>如果这样安装失败，或许你要在上面的命令之前加上sudo，并按提示输入你的用户密码。</p>
<p>如果需要检验安装NodeJS或NPM是否要成功，可以通过下面的命令来检验：</p>
<p>$ node -v</p>
<p>v0.10.13</p>
<p>$ npm -v</p>
<p>1.3.2</p>
<p>这样你的NodeJS和NPM表示安装成功。</p>
<blockquote>
<ul>
<li>安装CLI</li>
</ul>
</blockquote>
<p>为了方便使用Grunt，你应该在全局范围内安装Grunt的命令行接口(CLI)。在命令行中执行：</p>
<p>$ npm install -g grunt-cli</p>
<p>这条命令将会把grunt命令植入到你的系统路径中，这样就允许你从任意目录中运行Grunt(定位到任意目录运行grunt命令)</p>
<blockquote>
<ul>
<li>运行grunt</li>
</ul>
</blockquote>
<p>进入到Gruntfile.js的目录,在命令行执行：</p>
<p>$ npm install</p>
<p>等待命令执行后，再执行:</p>
<p>$ grunt</p>
<p>即可把要压缩处理的文件处理到Gruntfile.js配置的目录</p>
<p>前端开发同学在开发过程中不需要每次都运行上面的grunt命令，可以在命令行运行一个：</p>
<p>$ grunt dev</p>
<p>即可时时监听修改过的文件。</p>
<h2 id="不能运行npm-install时-运行下面的命令…"><a href="#不能运行npm-install时-运行下面的命令…" class="headerlink" title="不能运行npm install时,运行下面的命令…"></a>不能运行npm install时,运行下面的命令…</h2><p>1.通过config命令</p>
<p>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a>  npm info underscore （如果上面配置正确这个命令会有字符串response）</p>
<p>2.命令行指定</p>
<p>npm –registry <a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a> info underscore</p>
<p>3.编辑~/.npmrc加入下面内容</p>
<p>registry = <a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a></p>
<p>npm可能是默认的proxy <a href="http://127.0.0.1.8087" target="_blank" rel="external">http://127.0.0.1.8087</a></p>
<p>$ npm config set proxy null</p>
<p>把代理去掉就行了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装grunt&quot;&gt;&lt;a href=&quot;#安装grunt&quot; class=&quot;headerlink&quot; title=&quot;安装grunt&quot;&gt;&lt;/a&gt;安装grunt&lt;/h2&gt;&lt;p&gt;Grunt运行离不开NodeJS和NPM。因此要使用Grunt首要的条件，你的系统需要安装NodeJ
    
    </summary>
    
      <category term="备忘" scheme="https://wo6x5a.github.io/categories/%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="gtunt" scheme="https://wo6x5a.github.io/tags/gtunt/"/>
    
  </entry>
  
  <entry>
    <title>eclipse远程debug</title>
    <link href="https://wo6x5a.github.io/2017/03/27/eclipse%E8%BF%9C%E7%A8%8Bdebug/"/>
    <id>https://wo6x5a.github.io/2017/03/27/eclipse远程debug/</id>
    <published>2017-03-27T07:11:43.000Z</published>
    <updated>2017-03-30T02:34:19.205Z</updated>
    
    <content type="html"><![CDATA[<p>远程Debug(Jboss-eap-6.2为例):</p>
<p>服务器:</p>
<p>..\bin\standalone.conf</p>
<p>#JAVA_OPTS=”$JAVA_OPTS -agentlib:jdwp=transport=dt_socket,address=8787,server=y,suspend=n”</p>
<p>打开注释</p>
<p>eclipse:</p>
<p>右键项目-&gt;debug as-&gt;debug configuration-&gt;remote java application</p>
<p>host:服务器IP</p>
<p>port:8787(可以自己改跟address=xxxx,一样)</p>
<p>注意,</p>
<p>同时只能一个用户远程debug.否则会报错.</p>
<p>远程服务器部署的代码跟本地要一样.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;远程Debug(Jboss-eap-6.2为例):&lt;/p&gt;
&lt;p&gt;服务器:&lt;/p&gt;
&lt;p&gt;..\bin\standalone.conf&lt;/p&gt;
&lt;p&gt;#JAVA_OPTS=”$JAVA_OPTS -agentlib:jdwp=transport=dt_socket,addr
    
    </summary>
    
      <category term="备忘" scheme="https://wo6x5a.github.io/categories/%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="eclipse" scheme="https://wo6x5a.github.io/tags/eclipse/"/>
    
  </entry>
  
</feed>
